// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case API_KEY = "API_KEY"
    case AWS_SECRET_KEY = "AWS_SECRET_KEY"
    case DATABASE_URL = "DATABASE_URL"
    case JWT_SECRET = "JWT_SECRET"
    case STRIPE_KEY = "STRIPE_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .API_KEY: (
            data: [
                0x1E, 0xF4, 0x59, 0xB2, 0x7F, 0xF6, 0x5F, 0x49,
                0xA6, 0x61, 0x40, 0xB7, 0x67, 0x70, 0xA1, 0x08,
                0x6A, 0x7A, 0x18, 0x12, 0x23, 0x30, 0x25, 0xA7
            ],
            nonce: [
                0xE7, 0xA2, 0xAE, 0x6C, 0xA7, 0x05, 0x8D, 0x80,
                0x80, 0x5D, 0xAF, 0x6F
            ],
            tag: [
                0x12, 0x36, 0x98, 0xF8, 0x60, 0x85, 0x97, 0x23,
                0x92, 0x57, 0x7D, 0x70, 0xA0, 0x82, 0xB3, 0x61
            ]
        ),
        .AWS_SECRET_KEY: (
            data: [
                0x08, 0xA2, 0xC7, 0x07, 0x7E, 0x42, 0x8B, 0x6E,
                0x8F, 0x0D, 0x46, 0xC0, 0x1A, 0xD6, 0x9D, 0xD4,
                0x48, 0xC0, 0xE9, 0x4A, 0xC0, 0x67, 0x2E, 0x92,
                0xE5, 0x74, 0xB3, 0x18, 0xE1, 0x4B, 0x8C, 0x8D
            ],
            nonce: [
                0x18, 0x21, 0x6E, 0x88, 0xAA, 0x55, 0x48, 0x22,
                0x5A, 0x4B, 0x92, 0x9D
            ],
            tag: [
                0xB7, 0x8C, 0xE6, 0x87, 0x4E, 0xE6, 0xD2, 0x67,
                0x9D, 0x9E, 0xA3, 0xC1, 0xF4, 0xC9, 0xD3, 0xC6
            ]
        ),
        .DATABASE_URL: (
            data: [
                0x14, 0x77, 0xC3, 0x99, 0x21, 0x41, 0x0E, 0xE4,
                0x21, 0x4A, 0x2F, 0x24, 0xA3, 0x1F, 0x58, 0x24,
                0xAA, 0x85, 0xC1, 0x08, 0x6D, 0x7F, 0x15, 0x7F,
                0x6F, 0x6D, 0x03, 0x18, 0x2A, 0xC7, 0x25, 0x39,
                0xF9, 0x32, 0x3C, 0x4B, 0xB2, 0x27, 0xD2, 0x12,
                0xA8, 0x7F, 0xA8, 0xD0
            ],
            nonce: [
                0x0E, 0x4E, 0x72, 0xB0, 0x28, 0x29, 0x5E, 0x05,
                0x86, 0x07, 0x69, 0x84
            ],
            tag: [
                0x97, 0xED, 0x49, 0x92, 0x7A, 0xB3, 0x57, 0x8E,
                0xDD, 0x42, 0xD5, 0x0F, 0x30, 0xDA, 0x02, 0x25
            ]
        ),
        .JWT_SECRET: (
            data: [
                0xAB, 0x63, 0x50, 0xE7, 0x70, 0x0F, 0x46, 0x86,
                0x0B, 0x0F, 0x6F, 0x71, 0x76, 0xD1, 0x91, 0xE2,
                0xFA, 0x70, 0xAA, 0x50, 0xB7, 0x85, 0x42, 0x32,
                0xFC, 0x95, 0x78, 0x37, 0xC2
            ],
            nonce: [
                0x51, 0xD3, 0x92, 0xE2, 0xF1, 0xF1, 0x4A, 0x60,
                0xA7, 0xFC, 0x2A, 0x8A
            ],
            tag: [
                0xF2, 0x2A, 0xC6, 0xF9, 0xBB, 0xA2, 0x69, 0xCA,
                0x13, 0xB6, 0x02, 0x08, 0x3D, 0xBD, 0xA0, 0x1C
            ]
        ),
        .STRIPE_KEY: (
            data: [
                0xB1, 0xFA, 0xA7, 0xA5, 0x6C, 0x8A, 0xE3, 0x69,
                0xA1, 0x73, 0x94, 0xEE, 0x7C, 0xAF, 0xCA, 0xAF,
                0xE2, 0xBF, 0xE6, 0x71, 0x08, 0x40, 0xB8, 0x77,
                0x79, 0xBB, 0xDE
            ],
            nonce: [
                0xF4, 0x01, 0x0C, 0x9A, 0x9E, 0x3E, 0x9C, 0xE1,
                0x24, 0xC7, 0x2E, 0xC5
            ],
            tag: [
                0x3A, 0x6B, 0xA1, 0x0B, 0x88, 0xD7, 0x9A, 0xD0,
                0x58, 0x16, 0xEE, 0xA8, 0x13, 0x74, 0x0D, 0x85
            ]
        ),
    ]

    // Runtime decryption key (obfuscated)
    private static let keyComponents: [[UInt8]] = [
        [0xA7, 0xB7, 0xA9, 0x37],
        [0x9B, 0xDD, 0x1D, 0xA0],
        [0x3A, 0xF1, 0xAF, 0x86],
        [0x01, 0xBF, 0x2D, 0xA6],
        [0x5D, 0xBE, 0x35, 0x85],
        [0xCB, 0x25, 0xE6, 0xF9],
        [0x7F, 0xA6, 0xE7, 0x00],
        [0x88, 0xAA, 0xC9, 0x95],
    ]

    // Decrypt a credential at runtime
    public static func decrypt(_ key: CredentialKey) -> String? {
        guard let encryptedInfo = encryptedData[key] else { return nil }
        
        // Reconstruct the decryption key
        let keyData = keyComponents.flatMap { $0 }
        let symmetricKey = SymmetricKey(data: keyData)
        
        // Convert arrays to Data
        let encryptedData = Data(encryptedInfo.data)
        let nonce = try? AES.GCM.Nonce(data: Data(encryptedInfo.nonce))
        let tag = Data(encryptedInfo.tag)
        
        guard let nonce = nonce else { return nil }
        
        // Create sealed box for decryption
        let sealedBox = try? AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: encryptedData,
            tag: tag
        )
        
        guard let sealedBox = sealedBox else { return nil }
        
        // Decrypt
        do {
            let decryptedData = try AES.GCM.open(sealedBox, using: symmetricKey)
            return String(data: decryptedData, encoding: .utf8)
        } catch {
            return nil
        }
    }
    
    // Optional: Decrypt with caching
    private static var cache: [CredentialKey: String] = [:]
    
    public static func decryptCached(_ key: CredentialKey) -> String? {
        if let cached = cache[key] {
            return cached
        }
        
        guard let decrypted = decrypt(key) else { return nil }
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    public static func clearCache() {
        cache.removeAll()
    }
}