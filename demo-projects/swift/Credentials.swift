// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case API_KEY = "API_KEY"
    case AWS_SECRET_KEY = "AWS_SECRET_KEY"
    case DATABASE_URL = "DATABASE_URL"
    case JWT_SECRET = "JWT_SECRET"
    case STRIPE_KEY = "STRIPE_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .API_KEY: (
            data: [
                0xCF, 0xF4, 0x30, 0xE7, 0x05, 0x7D, 0xE4, 0x75,
                0x08, 0xC2, 0x15, 0x46, 0xC3, 0x35, 0x4A, 0x24,
                0xFD, 0x45, 0xB1, 0x7D, 0x26, 0xE0, 0xE7, 0x8E
            ],
            nonce: [
                0x24, 0x33, 0xDE, 0xA9, 0x8A, 0xDA, 0x14, 0x6B,
                0x84, 0x4E, 0x58, 0xDC
            ],
            tag: [
                0xBF, 0x04, 0xC7, 0x98, 0x40, 0x1E, 0x21, 0xDB,
                0x42, 0xA5, 0xBA, 0xDE, 0xC1, 0x5A, 0xD1, 0x71
            ]
        ),
        .AWS_SECRET_KEY: (
            data: [
                0xAA, 0x78, 0x47, 0x1E, 0xC5, 0x80, 0x31, 0x68,
                0xB3, 0x3C, 0x63, 0x6B, 0x05, 0xF4, 0xA2, 0x9D,
                0xEA, 0x4B, 0x56, 0x0F, 0x7A, 0x56, 0xFB, 0xDB,
                0x7F, 0xAB, 0x46, 0xE9, 0x9D, 0x20, 0x00, 0x79
            ],
            nonce: [
                0x18, 0x32, 0xC3, 0x11, 0x45, 0x70, 0x50, 0x02,
                0x3C, 0x2E, 0x28, 0xC8
            ],
            tag: [
                0x4E, 0x39, 0xC4, 0x0F, 0xC4, 0xCC, 0x49, 0xDB,
                0xA9, 0x52, 0xD9, 0xCC, 0xF2, 0xF8, 0xCD, 0x01
            ]
        ),
        .DATABASE_URL: (
            data: [
                0x25, 0x3F, 0x23, 0xAD, 0xAD, 0x4E, 0x7E, 0xD3,
                0x80, 0x5D, 0xBC, 0x65, 0xA7, 0x2C, 0x21, 0x1A,
                0xB1, 0xDB, 0x7B, 0xED, 0x0B, 0x06, 0x13, 0xEA,
                0x8B, 0x63, 0x3B, 0xB9, 0x44, 0xE9, 0x95, 0x7D,
                0xAE, 0xC4, 0x2E, 0x00, 0x1D, 0x04, 0xF9, 0x5D,
                0xF8, 0xAC, 0x9B, 0xCC
            ],
            nonce: [
                0xB0, 0x39, 0x7D, 0xD1, 0x29, 0x30, 0x26, 0xF7,
                0x2E, 0x88, 0xA6, 0x27
            ],
            tag: [
                0xB7, 0xA6, 0xB2, 0xF8, 0x31, 0x11, 0x20, 0x96,
                0xE9, 0x36, 0x73, 0xF5, 0x4D, 0xF4, 0x2B, 0x25
            ]
        ),
        .JWT_SECRET: (
            data: [
                0x59, 0xD0, 0x6D, 0x7D, 0xFB, 0x79, 0x45, 0xE1,
                0x10, 0x6E, 0x40, 0x22, 0xE3, 0x2C, 0x54, 0x2C,
                0x43, 0x1D, 0x4A, 0x78, 0xD4, 0xE6, 0x2D, 0x63,
                0xAA, 0xE0, 0xA1, 0x55, 0x76
            ],
            nonce: [
                0x1F, 0xFE, 0x4E, 0x19, 0xC1, 0x74, 0x0B, 0xA2,
                0x7F, 0x8A, 0xD2, 0x01
            ],
            tag: [
                0x49, 0xC4, 0x1E, 0x2F, 0xC0, 0x46, 0xAA, 0x64,
                0x76, 0x42, 0x06, 0xB7, 0xF4, 0xE7, 0x1F, 0xD4
            ]
        ),
        .STRIPE_KEY: (
            data: [
                0x63, 0x77, 0xAA, 0x22, 0x9A, 0xAB, 0xD3, 0x6A,
                0xD0, 0xDC, 0xFB, 0x84, 0x13, 0x2C, 0xE1, 0xC6,
                0x9E, 0x08, 0xC4, 0xF5, 0xEB, 0x75, 0x5D, 0x04,
                0x05, 0x9A, 0x7B
            ],
            nonce: [
                0xF9, 0x74, 0x47, 0xFF, 0xE8, 0x7F, 0xAA, 0xB0,
                0xFA, 0x1C, 0xD8, 0x65
            ],
            tag: [
                0x7A, 0xAA, 0xE2, 0xE0, 0x9B, 0x4C, 0x66, 0x0F,
                0x24, 0xCE, 0x70, 0x53, 0xA0, 0x86, 0x48, 0xAD
            ]
        ),
    ]

    // Runtime decryption key (obfuscated)
    private static let keyComponents: [[UInt8]] = [
        [0x36, 0x21, 0xA6, 0x47],
        [0xF9, 0x7A, 0xEB, 0xED],
        [0xD4, 0x4C, 0x84, 0x2D],
        [0xDA, 0xF2, 0x8A, 0xDD],
        [0xD1, 0x04, 0x91, 0x6E],
        [0x48, 0x4A, 0x56, 0x1B],
        [0x9E, 0x33, 0x7D, 0xD4],
        [0x78, 0x29, 0x26, 0x4C],
    ]

    // Decrypt a credential at runtime
    public static func decrypt(_ key: CredentialKey) -> String? {
        guard let encryptedInfo = encryptedData[key] else { return nil }
        
        // Reconstruct the decryption key
        let keyData = keyComponents.flatMap { $0 }
        let symmetricKey = SymmetricKey(data: keyData)
        
        // Convert arrays to Data
        let encryptedData = Data(encryptedInfo.data)
        let nonce = try? AES.GCM.Nonce(data: Data(encryptedInfo.nonce))
        let tag = Data(encryptedInfo.tag)
        
        guard let nonce = nonce else { return nil }
        
        // Create sealed box for decryption
        let sealedBox = try? AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: encryptedData,
            tag: tag
        )
        
        guard let sealedBox = sealedBox else { return nil }
        
        // Decrypt
        do {
            let decryptedData = try AES.GCM.open(sealedBox, using: symmetricKey)
            return String(data: decryptedData, encoding: .utf8)
        } catch {
            return nil
        }
    }
    
    // Optional: Decrypt with caching
    private static var cache: [CredentialKey: String] = [:]
    
    public static func decryptCached(_ key: CredentialKey) -> String? {
        if let cached = cache[key] {
            return cached
        }
        
        guard let decrypted = decrypt(key) else { return nil }
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    public static func clearCache() {
        cache.removeAll()
    }
}