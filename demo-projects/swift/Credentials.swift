// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case API_KEY = "API_KEY"
    case AWS_SECRET_KEY = "AWS_SECRET_KEY"
    case DATABASE_URL = "DATABASE_URL"
    case JWT_SECRET = "JWT_SECRET"
    case STRIPE_KEY = "STRIPE_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .API_KEY: (
            data: [
                0x7E, 0x1D, 0x68, 0x43, 0x78, 0x67, 0xDC, 0x7E,
                0xED, 0x36, 0xB6, 0x06, 0x95, 0x35, 0x19, 0xD4,
                0x6C, 0x95, 0x57, 0x2E, 0x39, 0xA0, 0x2B, 0x99
            ],
            nonce: [
                0xFC, 0x4F, 0xD6, 0x62, 0x24, 0xD4, 0x94, 0x92,
                0x9E, 0xD7, 0xFA, 0xD6
            ],
            tag: [
                0x29, 0x98, 0x81, 0xAA, 0x0E, 0x07, 0xAD, 0x42,
                0x3C, 0x66, 0x2F, 0x61, 0x4C, 0x96, 0x99, 0x11
            ]
        ),
        .AWS_SECRET_KEY: (
            data: [
                0x83, 0x1A, 0x42, 0x9E, 0xF9, 0x25, 0x7F, 0xB7,
                0x7F, 0xD1, 0xB0, 0xF2, 0x19, 0xCA, 0xA6, 0x69,
                0xF2, 0xBE, 0x4B, 0x0A, 0x1D, 0xA7, 0x00, 0x62,
                0x60, 0xBC, 0x9E, 0x6A, 0xAF, 0xE4, 0x3C, 0xF5
            ],
            nonce: [
                0x26, 0xDB, 0xCB, 0xE8, 0x1B, 0x85, 0xBB, 0xC8,
                0xA5, 0x4E, 0x8B, 0x51
            ],
            tag: [
                0x20, 0x3D, 0x24, 0x39, 0xFB, 0xC3, 0xFC, 0xEB,
                0xB1, 0xE0, 0x10, 0x05, 0x06, 0xD9, 0xFA, 0x90
            ]
        ),
        .DATABASE_URL: (
            data: [
                0xD1, 0xD3, 0x30, 0xC4, 0x93, 0x69, 0x46, 0x78,
                0xED, 0xAC, 0x45, 0xCF, 0x66, 0xB4, 0x17, 0x0A,
                0x2C, 0x02, 0x25, 0xE6, 0x59, 0x7D, 0xED, 0xAC,
                0x4E, 0xC4, 0x59, 0x2E, 0x10, 0x30, 0xC3, 0xA1,
                0xC9, 0xFB, 0x62, 0x30, 0xC1, 0x79, 0xF8, 0x25,
                0x95, 0xC9, 0x46, 0x3F
            ],
            nonce: [
                0x37, 0xCF, 0x69, 0x5C, 0x57, 0x61, 0xFA, 0xD2,
                0x5C, 0x8B, 0x6C, 0x56
            ],
            tag: [
                0x11, 0x2D, 0xA7, 0xE0, 0xD2, 0x8B, 0xAA, 0x92,
                0xE3, 0xDA, 0x8F, 0xBC, 0xC9, 0x56, 0x41, 0x0F
            ]
        ),
        .JWT_SECRET: (
            data: [
                0xAE, 0x15, 0x67, 0x88, 0x08, 0x17, 0x8E, 0x88,
                0x8E, 0x51, 0x86, 0x64, 0xF3, 0x28, 0x82, 0x67,
                0x6F, 0x65, 0x21, 0x28, 0x20, 0x2A, 0x6D, 0x18,
                0xA0, 0xF0, 0x97, 0x97, 0x04
            ],
            nonce: [
                0x3C, 0xB8, 0xAC, 0xC8, 0x87, 0xCA, 0xCC, 0x66,
                0xD5, 0xFB, 0x67, 0x3C
            ],
            tag: [
                0xA1, 0x43, 0x3C, 0xED, 0x88, 0xB9, 0x5D, 0x74,
                0xBD, 0xFF, 0xEB, 0x35, 0xA0, 0xAE, 0x1A, 0x7F
            ]
        ),
        .STRIPE_KEY: (
            data: [
                0x38, 0xF0, 0x69, 0x77, 0x90, 0x77, 0xD4, 0xE8,
                0xB3, 0x20, 0xD2, 0x36, 0xF6, 0xA3, 0xE5, 0x0A,
                0x8C, 0x09, 0x5E, 0x24, 0x85, 0xCB, 0x22, 0x20,
                0xD2, 0x6C, 0x7E
            ],
            nonce: [
                0xA6, 0x24, 0x41, 0xD8, 0x66, 0x5D, 0x7E, 0x96,
                0xE1, 0xEC, 0x37, 0xFB
            ],
            tag: [
                0x08, 0x14, 0xF9, 0xEE, 0xCB, 0x1F, 0xCF, 0x96,
                0x6E, 0x0C, 0x3B, 0xD2, 0x66, 0xC3, 0x5F, 0xB8
            ]
        ),
    ]

    // Runtime decryption key (obfuscated)
    private static let keyComponents: [[UInt8]] = [
        [0x44, 0xEF, 0x68, 0xCF],
        [0xDA, 0xC2, 0x3C, 0x55],
        [0x64, 0x03, 0xF0, 0x27],
        [0xE1, 0x81, 0x41, 0xC3],
        [0xFD, 0x2D, 0xA5, 0x9E],
        [0xC3, 0xE8, 0xBD, 0x2E],
        [0x5D, 0x6F, 0x67, 0x83],
        [0xA7, 0x97, 0xA3, 0x7F],
    ]

    // Decrypt a credential at runtime
    public static func decrypt(_ key: CredentialKey) -> String? {
        guard let encryptedInfo = encryptedData[key] else { return nil }
        
        // Reconstruct the decryption key
        let keyData = keyComponents.flatMap { $0 }
        let symmetricKey = SymmetricKey(data: keyData)
        
        // Convert arrays to Data
        let encryptedData = Data(encryptedInfo.data)
        let nonce = try? AES.GCM.Nonce(data: Data(encryptedInfo.nonce))
        let tag = Data(encryptedInfo.tag)
        
        guard let nonce = nonce else { return nil }
        
        // Create sealed box for decryption
        let sealedBox = try? AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: encryptedData,
            tag: tag
        )
        
        guard let sealedBox = sealedBox else { return nil }
        
        // Decrypt
        do {
            let decryptedData = try AES.GCM.open(sealedBox, using: symmetricKey)
            return String(data: decryptedData, encoding: .utf8)
        } catch {
            return nil
        }
    }
    
    // Optional: Decrypt with caching
    private static var cache: [CredentialKey: String] = [:]
    
    public static func decryptCached(_ key: CredentialKey) -> String? {
        if let cached = cache[key] {
            return cached
        }
        
        guard let decrypted = decrypt(key) else { return nil }
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    public static func clearCache() {
        cache.removeAll()
    }
}