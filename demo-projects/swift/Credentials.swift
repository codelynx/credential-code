// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case API_KEY = "API_KEY"
    case AWS_SECRET_KEY = "AWS_SECRET_KEY"
    case DATABASE_URL = "DATABASE_URL"
    case JWT_SECRET = "JWT_SECRET"
    case STRIPE_KEY = "STRIPE_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .API_KEY: (
            data: [
                0xC6, 0xF0, 0x10, 0x00, 0xC4, 0xF8, 0x77, 0xD5,
                0x49, 0x94, 0x27, 0xB1, 0x4F, 0xC5, 0x75, 0x91,
                0xF6, 0x4F, 0x27, 0x9C, 0x8C, 0x91, 0x4E, 0xFC
            ],
            nonce: [
                0x42, 0x32, 0x66, 0xF9, 0x19, 0xD3, 0x52, 0xBA,
                0xA3, 0xD2, 0x8B, 0x99
            ],
            tag: [
                0x85, 0x88, 0x5D, 0xEC, 0x41, 0x6E, 0x6E, 0xBE,
                0x8D, 0x4F, 0x95, 0xEA, 0xF3, 0xC5, 0x94, 0xE6
            ]
        ),
        .AWS_SECRET_KEY: (
            data: [
                0x82, 0xFC, 0x81, 0xAC, 0x09, 0x67, 0xBC, 0x26,
                0xA4, 0x3F, 0x5D, 0x3F, 0x50, 0xDE, 0x30, 0x2C,
                0x44, 0x45, 0x8D, 0x61, 0xC4, 0xB2, 0x68, 0x2D,
                0x31, 0x6D, 0x44, 0xBD, 0xA6, 0x4E, 0x3D, 0x45
            ],
            nonce: [
                0xC8, 0x9F, 0x00, 0x92, 0x06, 0x0A, 0x0F, 0xEB,
                0x8C, 0xD4, 0x22, 0xAF
            ],
            tag: [
                0x8D, 0x4D, 0x79, 0x38, 0x2C, 0xEF, 0xD2, 0x3C,
                0x69, 0x8B, 0x71, 0x07, 0xBE, 0x4A, 0x74, 0x4E
            ]
        ),
        .DATABASE_URL: (
            data: [
                0x93, 0x37, 0x85, 0x1C, 0x78, 0x33, 0x3C, 0x65,
                0x4D, 0x89, 0x35, 0x2B, 0x9A, 0x58, 0x1B, 0x9B,
                0x52, 0x39, 0xF0, 0xAD, 0xF6, 0x2B, 0x7B, 0xF1,
                0x87, 0xB3, 0x80, 0x76, 0x42, 0xFA, 0x22, 0xC4,
                0xC2, 0xB1, 0xEC, 0x88, 0x65, 0x57, 0x7B, 0xF4,
                0x27, 0x1A, 0x61, 0xFE
            ],
            nonce: [
                0xFA, 0x9B, 0x34, 0xBC, 0x42, 0x34, 0xB9, 0x18,
                0xF9, 0x80, 0x99, 0x5E
            ],
            tag: [
                0x9F, 0xEB, 0x71, 0xBF, 0xBB, 0x01, 0x99, 0x83,
                0x14, 0x26, 0xB6, 0xF3, 0xC8, 0xCB, 0xEB, 0xE4
            ]
        ),
        .JWT_SECRET: (
            data: [
                0x31, 0x19, 0x65, 0xFB, 0x27, 0xCF, 0x90, 0x55,
                0x58, 0x78, 0xF6, 0x32, 0x3D, 0xE2, 0x88, 0x00,
                0x00, 0x71, 0xAB, 0x27, 0x42, 0x0C, 0xB9, 0xB2,
                0x60, 0xB3, 0x77, 0xD6, 0x29
            ],
            nonce: [
                0x44, 0x2F, 0x27, 0x5C, 0x5E, 0x3E, 0xE9, 0xA5,
                0x89, 0xCF, 0xED, 0xF2
            ],
            tag: [
                0xA6, 0x29, 0x03, 0x22, 0x29, 0x7F, 0x2F, 0x72,
                0x85, 0xD7, 0x79, 0xFA, 0x94, 0xFB, 0x9B, 0x7C
            ]
        ),
        .STRIPE_KEY: (
            data: [
                0x41, 0x16, 0x9B, 0x14, 0x86, 0xF5, 0xEC, 0xDA,
                0x51, 0xAB, 0x6C, 0x5C, 0x8E, 0xBB, 0x1F, 0xAD,
                0x3B, 0xD4, 0xB0, 0xC3, 0x6A, 0x6D, 0x66, 0xE7,
                0x62, 0xDB, 0xEC
            ],
            nonce: [
                0xF7, 0x9C, 0x1A, 0xAB, 0x6D, 0x5C, 0x59, 0x9F,
                0x60, 0xD1, 0x8F, 0xF7
            ],
            tag: [
                0xD3, 0x99, 0x58, 0xA2, 0x68, 0x26, 0x45, 0xB5,
                0x88, 0x23, 0xAF, 0xCA, 0xC6, 0xD1, 0x8F, 0xF0
            ]
        ),
    ]

    // Runtime decryption key (obfuscated)
    private static let keyComponents: [[UInt8]] = [
        [0x38, 0x8B, 0x01, 0xC5],
        [0xD5, 0xF8, 0x2A, 0x6D],
        [0xC2, 0x0A, 0xC1, 0xCA],
        [0xA1, 0x9B, 0x9C, 0xFA],
        [0x4D, 0x85, 0x42, 0x48],
        [0xA5, 0xD7, 0x6E, 0x42],
        [0x59, 0x43, 0x12, 0x46],
        [0x3D, 0x2B, 0x2B, 0x3F],
    ]

    // Decrypt a credential at runtime
    public static func decrypt(_ key: CredentialKey) -> String? {
        guard let encryptedInfo = encryptedData[key] else { return nil }
        
        // Reconstruct the decryption key
        let keyData = keyComponents.flatMap { $0 }
        let symmetricKey = SymmetricKey(data: keyData)
        
        // Convert arrays to Data
        let encryptedData = Data(encryptedInfo.data)
        let nonce = try? AES.GCM.Nonce(data: Data(encryptedInfo.nonce))
        let tag = Data(encryptedInfo.tag)
        
        guard let nonce = nonce else { return nil }
        
        // Create sealed box for decryption
        let sealedBox = try? AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: encryptedData,
            tag: tag
        )
        
        guard let sealedBox = sealedBox else { return nil }
        
        // Decrypt
        do {
            let decryptedData = try AES.GCM.open(sealedBox, using: symmetricKey)
            return String(data: decryptedData, encoding: .utf8)
        } catch {
            return nil
        }
    }
    
    // Optional: Decrypt with caching
    private static var cache: [CredentialKey: String] = [:]
    
    public static func decryptCached(_ key: CredentialKey) -> String? {
        if let cached = cache[key] {
            return cached
        }
        
        guard let decrypted = decrypt(key) else { return nil }
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    public static func clearCache() {
        cache.removeAll()
    }
}