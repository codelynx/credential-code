// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

package com.example.credentials;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class Credentials {
    public enum CredentialKey {
        API_KEY,
        AWS_SECRET_KEY,
        DATABASE_URL,
        JWT_SECRET,
        STRIPE_KEY
    }

    private static class EncryptedData {
        final byte[] data;
        final byte[] nonce;
        final byte[] tag;
        
        EncryptedData(byte[] data, byte[] nonce, byte[] tag) {
            this.data = data;
            this.nonce = nonce;
            this.tag = tag;
        }
    }
    
    private static final Map<CredentialKey, EncryptedData> encryptedData;
    private static final byte[][] keyComponents;
    
    static {
        // Initialize encrypted data
        encryptedData = new HashMap<>();
        encryptedData.put(CredentialKey.API_KEY, new EncryptedData(
            new byte[]{
                (byte)-57, (byte)0x5D, (byte)-38, (byte)0x41, (byte)0x4D, (byte)-93,
                (byte)0x2F, (byte)0x7E, (byte)0x66, (byte)-56, (byte)-119, (byte)-111,
                (byte)0x4E, (byte)-65, (byte)0x2A, (byte)0x49, (byte)-73, (byte)0x30,
                (byte)-64, (byte)-25, (byte)0x2A, (byte)-1, (byte)0x6E, (byte)-57
            },
            new byte[]{
                (byte)-67, (byte)-65, (byte)0x6A, (byte)-118, (byte)-32, (byte)0x10,
                (byte)0x4B, (byte)0x1C, (byte)0x7E, (byte)-78, (byte)0x6B, (byte)-81
            },
            new byte[]{
                (byte)0x33, (byte)0x38, (byte)-83, (byte)-60, (byte)-125, (byte)0x3F,
                (byte)0x20, (byte)-47, (byte)-73, (byte)0x3C, (byte)0x6D, (byte)0x0F,
                (byte)0x23, (byte)-117, (byte)-68, (byte)-65
            }
        ));
        encryptedData.put(CredentialKey.AWS_SECRET_KEY, new EncryptedData(
            new byte[]{
                (byte)-96, (byte)-47, (byte)0x49, (byte)-22, (byte)0x36, (byte)0x2F,
                (byte)0x3F, (byte)0x65, (byte)0x27, (byte)-85, (byte)0x0C, (byte)0x17,
                (byte)0x70, (byte)0x67, (byte)0x0B, (byte)-125, (byte)-123, (byte)0x18,
                (byte)0x50, (byte)0x55, (byte)-75, (byte)-68, (byte)-109, (byte)0x79,
                (byte)-121, (byte)-5, (byte)-40, (byte)-2, (byte)0x29, (byte)0x37,
                (byte)0x6E, (byte)-87
            },
            new byte[]{
                (byte)-10, (byte)-42, (byte)0x49, (byte)0x5A, (byte)-57, (byte)0x5A,
                (byte)-60, (byte)-123, (byte)0x59, (byte)0x15, (byte)0x59, (byte)-19
            },
            new byte[]{
                (byte)-1, (byte)-56, (byte)-47, (byte)-21, (byte)-111, (byte)-112,
                (byte)0x34, (byte)0x14, (byte)0x18, (byte)0x63, (byte)0x05, (byte)-43,
                (byte)0x30, (byte)-93, (byte)0x08, (byte)0x5B
            }
        ));
        encryptedData.put(CredentialKey.DATABASE_URL, new EncryptedData(
            new byte[]{
                (byte)0x4D, (byte)-47, (byte)0x13, (byte)-116, (byte)-51, (byte)-101,
                (byte)-88, (byte)0x03, (byte)-107, (byte)-77, (byte)0x59, (byte)0x2F,
                (byte)-104, (byte)0x65, (byte)-37, (byte)0x4A, (byte)0x18, (byte)0x15,
                (byte)-77, (byte)0x5C, (byte)0x0B, (byte)0x70, (byte)0x13, (byte)0x27,
                (byte)-127, (byte)-35, (byte)-76, (byte)0x0C, (byte)-57, (byte)0x7E,
                (byte)-69, (byte)-111, (byte)-124, (byte)0x63, (byte)0x19, (byte)0x4B,
                (byte)0x0C, (byte)0x36, (byte)0x22, (byte)-57, (byte)-89, (byte)-7,
                (byte)0x22, (byte)0x00
            },
            new byte[]{
                (byte)-22, (byte)0x79, (byte)-116, (byte)-54, (byte)-4, (byte)-57,
                (byte)-21, (byte)0x5A, (byte)0x6B, (byte)0x15, (byte)0x1B, (byte)0x4E
            },
            new byte[]{
                (byte)-127, (byte)0x00, (byte)-99, (byte)-47, (byte)0x62, (byte)-25,
                (byte)-7, (byte)-64, (byte)0x06, (byte)-57, (byte)0x50, (byte)0x77,
                (byte)0x52, (byte)-71, (byte)-99, (byte)-112
            }
        ));
        encryptedData.put(CredentialKey.JWT_SECRET, new EncryptedData(
            new byte[]{
                (byte)0x55, (byte)0x4D, (byte)-40, (byte)-9, (byte)-37, (byte)0x28,
                (byte)0x5A, (byte)0x1B, (byte)0x41, (byte)-106, (byte)-81, (byte)-30,
                (byte)0x0A, (byte)0x6F, (byte)-69, (byte)-87, (byte)0x6D, (byte)0x1C,
                (byte)0x6F, (byte)0x43, (byte)0x40, (byte)-112, (byte)0x0C, (byte)-11,
                (byte)-68, (byte)-78, (byte)0x2F, (byte)0x7C, (byte)0x50
            },
            new byte[]{
                (byte)0x71, (byte)-119, (byte)-27, (byte)-77, (byte)0x5D, (byte)-31,
                (byte)0x33, (byte)0x6B, (byte)-4, (byte)-59, (byte)-122, (byte)-31
            },
            new byte[]{
                (byte)0x65, (byte)0x21, (byte)-96, (byte)-8, (byte)-46, (byte)0x03,
                (byte)0x7D, (byte)0x66, (byte)-62, (byte)-80, (byte)-5, (byte)0x72,
                (byte)-99, (byte)0x4A, (byte)-101, (byte)0x5B
            }
        ));
        encryptedData.put(CredentialKey.STRIPE_KEY, new EncryptedData(
            new byte[]{
                (byte)-42, (byte)0x00, (byte)0x2F, (byte)0x56, (byte)-85, (byte)0x7C,
                (byte)-86, (byte)0x32, (byte)0x6B, (byte)-53, (byte)0x1C, (byte)-73,
                (byte)-46, (byte)-12, (byte)0x3A, (byte)0x44, (byte)0x2E, (byte)-35,
                (byte)0x44, (byte)0x4F, (byte)-97, (byte)-83, (byte)-61, (byte)0x55,
                (byte)-63, (byte)0x7F, (byte)0x33
            },
            new byte[]{
                (byte)0x3B, (byte)-95, (byte)-99, (byte)0x07, (byte)0x47, (byte)0x24,
                (byte)-12, (byte)-92, (byte)0x77, (byte)0x35, (byte)0x34, (byte)0x49
            },
            new byte[]{
                (byte)0x36, (byte)0x77, (byte)-42, (byte)0x64, (byte)-33, (byte)-79,
                (byte)-24, (byte)-102, (byte)-110, (byte)-75, (byte)-45, (byte)0x3C,
                (byte)0x4B, (byte)-26, (byte)0x73, (byte)-56
            }
        ));

        // Initialize key components
        keyComponents = new byte[][]{
            new byte[]{(byte)-124, (byte)-125, (byte)0x69, (byte)0x61},
            new byte[]{(byte)0x09, (byte)0x63, (byte)-107, (byte)-37},
            new byte[]{(byte)-12, (byte)0x08, (byte)0x7F, (byte)-2},
            new byte[]{(byte)-51, (byte)0x67, (byte)-29, (byte)-11},
            new byte[]{(byte)0x77, (byte)0x5C, (byte)0x14, (byte)-115},
            new byte[]{(byte)-5, (byte)0x74, (byte)-2, (byte)-51},
            new byte[]{(byte)-17, (byte)0x3A, (byte)-72, (byte)-118},
            new byte[]{(byte)-46, (byte)-68, (byte)-69, (byte)-128},
        };
    }

    public static String decrypt(CredentialKey key) {
        EncryptedData encrypted = encryptedData.get(key);
        if (encrypted == null) return null;
        
        try {
            // Reconstruct key
            byte[] keyData = reconstructKey();
            SecretKeySpec secretKey = new SecretKeySpec(keyData, "AES");
            
            // Decrypt
            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
            GCMParameterSpec gcmSpec = new GCMParameterSpec(128, encrypted.nonce);
            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmSpec);
            
            byte[] combined = concatenate(encrypted.data, encrypted.tag);
            byte[] decrypted = cipher.doFinal(combined);
            
            return new String(decrypted, StandardCharsets.UTF_8);
        } catch (Exception e) {
            return null;
        }
    }
    
    private static byte[] reconstructKey() {
        int totalLength = 0;
        for (byte[] component : keyComponents) {
            totalLength += component.length;
        }
        
        byte[] result = new byte[totalLength];
        int offset = 0;
        for (byte[] component : keyComponents) {
            System.arraycopy(component, 0, result, offset, component.length);
            offset += component.length;
        }
        return result;
    }
    
    private static byte[] concatenate(byte[] a, byte[] b) {
        byte[] result = new byte[a.length + b.length];
        System.arraycopy(a, 0, result, 0, a.length);
        System.arraycopy(b, 0, result, a.length, b.length);
        return result;
    }
    
    // Optional: Cached decryption
    private static final Map<CredentialKey, String> cache = new HashMap<>();
    
    public static String decryptCached(CredentialKey key) {
        String cached = cache.get(key);
        if (cached != null) return cached;
        
        String decrypted = decrypt(key);
        if (decrypted != null) {
            cache.put(key, decrypted);
        }
        return decrypted;
    }
    
    public static void clearCache() {
        cache.clear();
    }
}