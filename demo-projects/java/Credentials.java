// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

package com.example.credentials;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class Credentials {
    public enum CredentialKey {
        API_KEY,
        AWS_SECRET_KEY,
        DATABASE_URL,
        JWT_SECRET,
        STRIPE_KEY
    }

    private static class EncryptedData {
        final byte[] data;
        final byte[] nonce;
        final byte[] tag;
        
        EncryptedData(byte[] data, byte[] nonce, byte[] tag) {
            this.data = data;
            this.nonce = nonce;
            this.tag = tag;
        }
    }
    
    private static final Map<CredentialKey, EncryptedData> encryptedData;
    private static final byte[][] keyComponents;
    
    static {
        // Initialize encrypted data
        encryptedData = new HashMap<>();
        encryptedData.put(CredentialKey.API_KEY, new EncryptedData(
            new byte[]{
                (byte)-73, (byte)-95, (byte)0x68, (byte)-114, (byte)-38, (byte)-7,
                (byte)-22, (byte)0x66, (byte)-54, (byte)-98, (byte)-104, (byte)0x1D,
                (byte)0x1C, (byte)0x3A, (byte)0x36, (byte)0x07, (byte)0x4D, (byte)0x6B,
                (byte)0x15, (byte)-96, (byte)-60, (byte)0x74, (byte)-68, (byte)-82
            },
            new byte[]{
                (byte)-34, (byte)0x1F, (byte)-63, (byte)0x59, (byte)-124, (byte)0x6E,
                (byte)0x04, (byte)0x27, (byte)-108, (byte)-110, (byte)-35, (byte)-127
            },
            new byte[]{
                (byte)-82, (byte)-21, (byte)-59, (byte)-83, (byte)-68, (byte)0x2E,
                (byte)-36, (byte)-31, (byte)0x51, (byte)0x67, (byte)0x3B, (byte)0x41,
                (byte)-20, (byte)0x08, (byte)-128, (byte)0x7B
            }
        ));
        encryptedData.put(CredentialKey.AWS_SECRET_KEY, new EncryptedData(
            new byte[]{
                (byte)0x28, (byte)0x41, (byte)0x6F, (byte)0x73, (byte)0x1F, (byte)0x3E,
                (byte)0x3C, (byte)0x68, (byte)0x14, (byte)0x28, (byte)0x7C, (byte)-127,
                (byte)0x1D, (byte)-89, (byte)0x70, (byte)0x54, (byte)-75, (byte)-67,
                (byte)0x58, (byte)0x3A, (byte)0x67, (byte)-53, (byte)-98, (byte)-1,
                (byte)-105, (byte)-17, (byte)0x4A, (byte)0x50, (byte)0x7E, (byte)0x00,
                (byte)0x01, (byte)0x7E
            },
            new byte[]{
                (byte)0x2B, (byte)-40, (byte)-99, (byte)0x16, (byte)-47, (byte)-125,
                (byte)0x5C, (byte)0x25, (byte)-99, (byte)-6, (byte)0x2F, (byte)0x30
            },
            new byte[]{
                (byte)0x3A, (byte)-62, (byte)0x31, (byte)-43, (byte)-15, (byte)0x03,
                (byte)0x7E, (byte)0x25, (byte)-71, (byte)-8, (byte)0x0B, (byte)0x3C,
                (byte)0x49, (byte)0x10, (byte)0x34, (byte)-4
            }
        ));
        encryptedData.put(CredentialKey.DATABASE_URL, new EncryptedData(
            new byte[]{
                (byte)-20, (byte)0x68, (byte)0x7C, (byte)-80, (byte)-85, (byte)0x45,
                (byte)-40, (byte)0x21, (byte)0x62, (byte)0x0B, (byte)0x07, (byte)-80,
                (byte)0x56, (byte)0x0E, (byte)0x32, (byte)0x73, (byte)-1, (byte)0x56,
                (byte)0x57, (byte)0x46, (byte)0x72, (byte)-119, (byte)0x78, (byte)0x13,
                (byte)-75, (byte)-91, (byte)0x25, (byte)-72, (byte)0x6F, (byte)0x1E,
                (byte)0x3C, (byte)0x66, (byte)0x6F, (byte)0x3E, (byte)-14, (byte)0x4F,
                (byte)-98, (byte)-96, (byte)0x6A, (byte)-21, (byte)-17, (byte)0x1E,
                (byte)0x76, (byte)-10
            },
            new byte[]{
                (byte)-104, (byte)0x3E, (byte)0x68, (byte)0x43, (byte)-16, (byte)0x32,
                (byte)0x65, (byte)-9, (byte)0x3A, (byte)0x54, (byte)-97, (byte)0x58
            },
            new byte[]{
                (byte)-87, (byte)-100, (byte)-56, (byte)0x0A, (byte)0x71, (byte)-41,
                (byte)-74, (byte)-47, (byte)-85, (byte)0x34, (byte)0x79, (byte)0x55,
                (byte)0x04, (byte)0x6E, (byte)-106, (byte)0x69
            }
        ));
        encryptedData.put(CredentialKey.JWT_SECRET, new EncryptedData(
            new byte[]{
                (byte)-81, (byte)0x64, (byte)-44, (byte)-15, (byte)0x50, (byte)0x1E,
                (byte)-65, (byte)-10, (byte)0x59, (byte)0x0E, (byte)-46, (byte)-61,
                (byte)0x2E, (byte)0x6D, (byte)-20, (byte)-10, (byte)0x11, (byte)-23,
                (byte)-37, (byte)0x62, (byte)-78, (byte)-12, (byte)0x30, (byte)-97,
                (byte)-117, (byte)-90, (byte)0x07, (byte)-36, (byte)-19
            },
            new byte[]{
                (byte)-127, (byte)0x49, (byte)0x08, (byte)-2, (byte)0x61, (byte)-70,
                (byte)-73, (byte)-60, (byte)-33, (byte)0x52, (byte)0x05, (byte)-92
            },
            new byte[]{
                (byte)0x66, (byte)-60, (byte)0x1F, (byte)-60, (byte)0x20, (byte)-10,
                (byte)0x1D, (byte)-127, (byte)-106, (byte)0x2C, (byte)-36, (byte)-97,
                (byte)0x44, (byte)-10, (byte)0x57, (byte)-106
            }
        ));
        encryptedData.put(CredentialKey.STRIPE_KEY, new EncryptedData(
            new byte[]{
                (byte)0x7A, (byte)0x51, (byte)0x34, (byte)0x46, (byte)-64, (byte)0x06,
                (byte)-116, (byte)0x7B, (byte)0x1D, (byte)0x26, (byte)0x65, (byte)-92,
                (byte)-53, (byte)0x59, (byte)0x2A, (byte)0x41, (byte)-71, (byte)-54,
                (byte)-43, (byte)0x0C, (byte)0x4E, (byte)0x5E, (byte)0x07, (byte)0x79,
                (byte)-3, (byte)-127, (byte)0x1F
            },
            new byte[]{
                (byte)0x19, (byte)0x4D, (byte)0x49, (byte)-5, (byte)-41, (byte)0x45,
                (byte)-52, (byte)0x62, (byte)-14, (byte)0x57, (byte)0x38, (byte)0x36
            },
            new byte[]{
                (byte)0x7F, (byte)-73, (byte)0x1A, (byte)-72, (byte)0x62, (byte)-26,
                (byte)-90, (byte)-77, (byte)0x10, (byte)0x56, (byte)-61, (byte)-86,
                (byte)-106, (byte)-27, (byte)0x5A, (byte)-56
            }
        ));

        // Initialize key components
        keyComponents = new byte[][]{
            new byte[]{(byte)0x58, (byte)0x2F, (byte)0x1E, (byte)-104},
            new byte[]{(byte)0x42, (byte)0x03, (byte)-43, (byte)0x73},
            new byte[]{(byte)-42, (byte)-56, (byte)0x34, (byte)-113},
            new byte[]{(byte)0x52, (byte)-53, (byte)0x3D, (byte)-65},
            new byte[]{(byte)-53, (byte)0x09, (byte)0x4A, (byte)-50},
            new byte[]{(byte)0x2B, (byte)-19, (byte)0x2B, (byte)0x46},
            new byte[]{(byte)-119, (byte)-47, (byte)-110, (byte)0x63},
            new byte[]{(byte)-59, (byte)-80, (byte)-103, (byte)0x29},
        };
    }

    public static String decrypt(CredentialKey key) {
        EncryptedData encrypted = encryptedData.get(key);
        if (encrypted == null) return null;
        
        try {
            // Reconstruct key
            byte[] keyData = reconstructKey();
            SecretKeySpec secretKey = new SecretKeySpec(keyData, "AES");
            
            // Decrypt
            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
            GCMParameterSpec gcmSpec = new GCMParameterSpec(128, encrypted.nonce);
            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmSpec);
            
            byte[] combined = concatenate(encrypted.data, encrypted.tag);
            byte[] decrypted = cipher.doFinal(combined);
            
            return new String(decrypted, StandardCharsets.UTF_8);
        } catch (Exception e) {
            return null;
        }
    }
    
    private static byte[] reconstructKey() {
        int totalLength = 0;
        for (byte[] component : keyComponents) {
            totalLength += component.length;
        }
        
        byte[] result = new byte[totalLength];
        int offset = 0;
        for (byte[] component : keyComponents) {
            System.arraycopy(component, 0, result, offset, component.length);
            offset += component.length;
        }
        return result;
    }
    
    private static byte[] concatenate(byte[] a, byte[] b) {
        byte[] result = new byte[a.length + b.length];
        System.arraycopy(a, 0, result, 0, a.length);
        System.arraycopy(b, 0, result, a.length, b.length);
        return result;
    }
    
    // Optional: Cached decryption
    private static final Map<CredentialKey, String> cache = new HashMap<>();
    
    public static String decryptCached(CredentialKey key) {
        String cached = cache.get(key);
        if (cached != null) return cached;
        
        String decrypted = decrypt(key);
        if (decrypted != null) {
            cache.put(key, decrypted);
        }
        return decrypted;
    }
    
    public static void clearCache() {
        cache.clear();
    }
}