// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

package com.example.credentials

import javax.crypto.Cipher
import javax.crypto.spec.GCMParameterSpec
import javax.crypto.spec.SecretKeySpec

enum class CredentialKey {
    API_KEY,
    AWS_SECRET_KEY,
    DATABASE_URL,
    JWT_SECRET,
    STRIPE_KEY,
}

object Credentials {
    private data class EncryptedData(
        val data: ByteArray,
        val nonce: ByteArray,
        val tag: ByteArray
    )
    
    // Encrypted credential data as byte arrays
    private val encryptedData = mapOf(
        CredentialKey.API_KEY to EncryptedData(
            data = byteArrayOf(
                -116, -108, 0x7B, -18, -50, -115, 0x44, -127,
                -71, 0x63, -74, -83, 0x2B, -125, 0x51, -117,
                -70, -72, 0x4A, 0x09, -32, 0x48, 0x2F, -11
            ),
            nonce = byteArrayOf(
                0x67, -60, -112, -117, 0x75, -12, 0x1C, 0x36,
                0x23, 0x22, -108, -53
            ),
            tag = byteArrayOf(
                -113, -64, -62, 0x3F, 0x77, -41, 0x3D, -40,
                -99, -94, -12, 0x70, -53, 0x2F, 0x68, -83
            )
        ),
        CredentialKey.AWS_SECRET_KEY to EncryptedData(
            data = byteArrayOf(
                -119, 0x59, -101, 0x31, 0x5D, -80, 0x43, -6,
                -102, 0x62, 0x3D, 0x25, -77, 0x06, 0x18, 0x13,
                -35, -78, -47, 0x23, -29, 0x60, -18, 0x35,
                -38, 0x7A, 0x5E, 0x52, 0x1E, 0x09, -117, 0x54
            ),
            nonce = byteArrayOf(
                0x19, -82, -55, 0x67, -109, -18, -117, 0x3B,
                -96, -79, -24, 0x7E
            ),
            tag = byteArrayOf(
                -37, 0x19, -37, 0x4A, -62, 0x7D, -13, -114,
                -80, -81, -36, 0x1F, -8, -104, 0x5C, 0x0A
            )
        ),
        CredentialKey.DATABASE_URL to EncryptedData(
            data = byteArrayOf(
                -103, -121, 0x42, 0x53, -105, 0x3F, -104, -111,
                0x3D, -27, 0x10, 0x07, 0x4E, -22, 0x79, -104,
                0x77, 0x1D, -71, -88, 0x6A, -88, 0x37, -63,
                0x1E, 0x1A, -119, 0x53, -78, -22, -113, 0x76,
                0x79, 0x78, 0x27, 0x51, -107, 0x00, -117, -27,
                -16, 0x17, -54, -89
            ),
            nonce = byteArrayOf(
                -20, 0x6E, -60, -87, 0x68, -50, 0x71, 0x60,
                -3, -38, 0x32, -63
            ),
            tag = byteArrayOf(
                0x07, 0x63, -42, 0x61, 0x6E, 0x68, -11, -97,
                -102, 0x7D, 0x25, -104, 0x21, -8, -108, 0x5A
            )
        ),
        CredentialKey.JWT_SECRET to EncryptedData(
            data = byteArrayOf(
                -30, -108, -14, 0x44, 0x5A, 0x5D, -6, -34,
                0x5A, -39, -89, -22, -87, 0x22, 0x64, -120,
                0x1B, 0x3E, -120, -103, 0x78, 0x34, 0x6E, -30,
                -41, 0x11, -49, -88, 0x0D
            ),
            nonce = byteArrayOf(
                -63, 0x10, -116, -78, -77, 0x57, -39, 0x4A,
                -56, 0x4A, 0x24, -98
            ),
            tag = byteArrayOf(
                -93, 0x18, -124, 0x5F, -41, -14, 0x19, 0x01,
                0x0B, -93, 0x73, -49, 0x5D, 0x1D, -101, 0x50
            )
        ),
        CredentialKey.STRIPE_KEY to EncryptedData(
            data = byteArrayOf(
                -102, -106, -92, 0x3E, -18, -99, 0x1B, -15,
                0x2B, 0x64, 0x0C, 0x7C, 0x23, 0x54, -1, -59,
                -97, 0x01, 0x2B, 0x5D, 0x0A, -61, 0x48, 0x64,
                0x2C, -60, -63
            ),
            nonce = byteArrayOf(
                0x57, 0x77, 0x05, 0x1C, 0x0B, 0x70, 0x3D, 0x3F,
                0x18, -92, -30, -49
            ),
            tag = byteArrayOf(
                0x2B, 0x20, -90, -90, 0x3B, 0x28, -69, -97,
                0x7A, -89, 0x26, 0x39, -89, -37, 0x72, -83
            )
        ),
    )

    // Runtime decryption key (obfuscated)
    private val keyComponents = arrayOf(
        byteArrayOf(0x00, -20, 0x52, 0x27),
        byteArrayOf(0x7B, 0x21, -104, 0x63),
        byteArrayOf(0x49, -6, 0x66, 0x7B),
        byteArrayOf(0x19, -99, 0x68, -74),
        byteArrayOf(0x3F, 0x3B, -119, -78),
        byteArrayOf(-62, 0x4D, -119, 0x04),
        byteArrayOf(0x2F, 0x13, -60, -3),
        byteArrayOf(-114, -10, -75, -17),
    )

    @JvmStatic
    fun decrypt(key: CredentialKey): String? {
        val encrypted = encryptedData[key] ?: return null
        
        return try {
            // Reconstruct the decryption key
            val keyData = keyComponents.flatMap { it.toList() }.toByteArray()
            val secretKey = SecretKeySpec(keyData, "AES")
            
            // Setup cipher for AES-GCM
            val cipher = Cipher.getInstance("AES/GCM/NoPadding")
            val gcmSpec = GCMParameterSpec(128, encrypted.nonce)
            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmSpec)
            
            // Combine ciphertext and tag for decryption
            val cipherTextWithTag = encrypted.data + encrypted.tag
            val decrypted = cipher.doFinal(cipherTextWithTag)
            
            String(decrypted, Charsets.UTF_8)
        } catch (e: Exception) {
            null
        }
    }
    
    // Optional: Decrypt with caching
    private val cache = mutableMapOf<CredentialKey, String>()
    
    @JvmStatic
    fun decryptCached(key: CredentialKey): String? {
        cache[key]?.let { return it }
        
        val decrypted = decrypt(key) ?: return null
        cache[key] = decrypted
        return decrypted
    }
    
    // Clear cache when needed
    @JvmStatic
    fun clearCache() {
        cache.clear()
    }
}