// credentials.h
// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

#ifndef CREDENTIALS_H
#define CREDENTIALS_H

#include <string>
#include <optional>
#include <unordered_map>

enum class CredentialKey {
    API_KEY,
    AWS_SECRET_KEY,
    DATABASE_URL,
    JWT_SECRET,
    STRIPE_KEY
};

class Credentials {
public:
    static std::optional<std::string> decrypt(CredentialKey key);
    static std::optional<std::string> decryptCached(CredentialKey key);
    static void clearCache();
    
private:
    static std::unordered_map<CredentialKey, std::string> cache;
};

#endif // CREDENTIALS_H

// credentials.cpp
// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

#include "credentials.h"
#include <vector>
#include <cstring>
#include <openssl/evp.h>
#include <openssl/aes.h>

namespace {
    struct EncryptedData {
        std::vector<uint8_t> data;
        std::vector<uint8_t> nonce;
        std::vector<uint8_t> tag;
    };
    
    const std::unordered_map<CredentialKey, EncryptedData> encryptedData = {
        {CredentialKey::API_KEY, {
            /*data*/ {
                0x9E, 0x33, 0x49, 0x78, 0x3D, 0xB5, 0xFB, 0xD3,
                0xCD, 0xD9, 0x5D, 0x32, 0x54, 0x7A, 0xDC, 0x40,
                0x39, 0xDC, 0x7E, 0xCA, 0xA7, 0xDE, 0xE8, 0x1B
            },
            /*nonce*/ {
                0x48, 0xD3, 0x55, 0xDA, 0x61, 0x9F, 0x0B, 0x09,
                0xB3, 0x74, 0xD9, 0xAB
            },
            /*tag*/ {
                0xEB, 0x49, 0x7A, 0x5B, 0x1F, 0x37, 0x2C, 0x83,
                0xB9, 0x14, 0xB6, 0x29, 0x3D, 0xC7, 0x6F, 0xA0
            }
        }},
        {CredentialKey::AWS_SECRET_KEY, {
            /*data*/ {
                0xF0, 0x15, 0x02, 0x50, 0x54, 0x7A, 0x14, 0x8D,
                0x4C, 0x7C, 0x02, 0xD1, 0x7C, 0x40, 0x68, 0xC9,
                0x60, 0x82, 0xBA, 0x6B, 0x4F, 0xF4, 0x0C, 0xA6,
                0x57, 0x81, 0x62, 0x0E, 0x15, 0x88, 0xA1, 0x6C
            },
            /*nonce*/ {
                0x2F, 0x2B, 0x2A, 0x5D, 0x99, 0xF8, 0x29, 0x23,
                0xA5, 0x63, 0x6F, 0xA8
            },
            /*tag*/ {
                0x61, 0xEA, 0xD5, 0xC1, 0x78, 0xA9, 0xF7, 0x49,
                0x6A, 0x10, 0x00, 0xF5, 0x0E, 0x4C, 0xBC, 0x3F
            }
        }},
        {CredentialKey::DATABASE_URL, {
            /*data*/ {
                0xD1, 0x26, 0x7A, 0xA5, 0xD2, 0x47, 0x60, 0xED,
                0x43, 0x20, 0x92, 0xCE, 0x6C, 0x4E, 0xEC, 0xC3,
                0x26, 0xC3, 0xCC, 0x62, 0xBD, 0x0C, 0x40, 0xC3,
                0xB5, 0xCD, 0x64, 0xBA, 0xE6, 0x3B, 0x79, 0xC3,
                0x44, 0x70, 0x08, 0x3B, 0x4E, 0xA6, 0xEC, 0xEC,
                0x00, 0xCC, 0xA3, 0x19
            },
            /*nonce*/ {
                0xD9, 0x7C, 0x1C, 0x57, 0xE1, 0x11, 0x2C, 0xAD,
                0x1A, 0x40, 0x8B, 0xE5
            },
            /*tag*/ {
                0x30, 0xE8, 0x90, 0x70, 0x8A, 0xAA, 0xEE, 0x3D,
                0xA0, 0x08, 0x71, 0xCD, 0x44, 0x32, 0x86, 0x02
            }
        }},
        {CredentialKey::JWT_SECRET, {
            /*data*/ {
                0x05, 0xE6, 0x61, 0x58, 0xA0, 0x1A, 0x62, 0x93,
                0x30, 0x38, 0xC5, 0xFA, 0x5A, 0xD9, 0xDF, 0xAD,
                0x4F, 0x93, 0x64, 0xCA, 0xFB, 0x19, 0x0D, 0x8E,
                0x7E, 0xC2, 0xB5, 0xCE, 0xFE
            },
            /*nonce*/ {
                0x18, 0xC2, 0xAC, 0x62, 0xC7, 0xB8, 0x22, 0x12,
                0x6A, 0x0A, 0x8D, 0x16
            },
            /*tag*/ {
                0x1F, 0x1A, 0x2F, 0x21, 0x98, 0x47, 0xFA, 0x35,
                0xA7, 0xB0, 0x81, 0x08, 0x94, 0x68, 0xC2, 0x38
            }
        }},
        {CredentialKey::STRIPE_KEY, {
            /*data*/ {
                0xFB, 0x69, 0x15, 0x66, 0x5A, 0x42, 0x0A, 0x76,
                0xD7, 0x0C, 0xB8, 0xB4, 0x28, 0xC0, 0x35, 0x0F,
                0xE3, 0xC5, 0xC8, 0x27, 0xB6, 0x47, 0xE5, 0xD2,
                0x59, 0x0A, 0xB8
            },
            /*nonce*/ {
                0xB3, 0x0F, 0x8E, 0x70, 0x2C, 0xE6, 0x4A, 0x0E,
                0x3D, 0x88, 0x1F, 0x92
            },
            /*tag*/ {
                0x88, 0x62, 0x99, 0xA9, 0x25, 0xBE, 0x05, 0x1D,
                0xE4, 0xB8, 0x5A, 0x52, 0x75, 0xD4, 0xB5, 0x7C
            }
        }},
    };

    // Runtime decryption key (obfuscated)
    const std::vector<std::vector<uint8_t>> keyComponents = {
        {0xB5, 0xB0, 0xF0, 0xE4},
        {0xFB, 0x4D, 0x7C, 0x9D},
        {0xB5, 0x9C, 0xE6, 0x17},
        {0x17, 0x0B, 0x58, 0x76},
        {0x0B, 0xC4, 0x95, 0x31},
        {0x09, 0xBF, 0x8A, 0xFD},
        {0x06, 0x6C, 0xF6, 0x03},
        {0xDD, 0x88, 0x04, 0xA0},
    };

    std::vector<uint8_t> reconstructKey() {
        std::vector<uint8_t> key;
        for (const auto& component : keyComponents) {
            key.insert(key.end(), component.begin(), component.end());
        }
        return key;
    }
}

std::unordered_map<CredentialKey, std::string> Credentials::cache;

std::optional<std::string> Credentials::decrypt(CredentialKey key) {
    auto it = encryptedData.find(key);
    if (it == encryptedData.end()) {
        return std::nullopt;
    }
    
    const auto& encrypted = it->second;
    auto keyData = reconstructKey();
    
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx) return std::nullopt;
    
    // Initialize AES-GCM decryption
    if (!EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), nullptr, keyData.data(), encrypted.nonce.data())) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Allocate output buffer
    std::vector<uint8_t> plaintext(encrypted.data.size());
    int len;
    
    // Decrypt
    if (!EVP_DecryptUpdate(ctx, plaintext.data(), &len, encrypted.data.data(), encrypted.data.size())) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Set tag
    if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, encrypted.tag.size(), 
                             const_cast<uint8_t*>(encrypted.tag.data()))) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Finalize
    int finalLen;
    if (!EVP_DecryptFinal_ex(ctx, plaintext.data() + len, &finalLen)) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    EVP_CIPHER_CTX_free(ctx);
    
    return std::string(plaintext.begin(), plaintext.begin() + len + finalLen);
}

std::optional<std::string> Credentials::decryptCached(CredentialKey key) {
    auto cached = cache.find(key);
    if (cached != cache.end()) {
        return cached->second;
    }
    
    auto decrypted = decrypt(key);
    if (decrypted) {
        cache[key] = *decrypted;
    }
    return decrypted;
}

void Credentials::clearCache() {
    cache.clear();
}