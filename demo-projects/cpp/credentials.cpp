// credentials.h
// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

#ifndef CREDENTIALS_H
#define CREDENTIALS_H

#include <string>
#include <optional>
#include <unordered_map>

enum class CredentialKey {
    API_KEY,
    AWS_SECRET_KEY,
    DATABASE_URL,
    JWT_SECRET,
    STRIPE_KEY
};

class Credentials {
public:
    static std::optional<std::string> decrypt(CredentialKey key);
    static std::optional<std::string> decryptCached(CredentialKey key);
    static void clearCache();
    
private:
    static std::unordered_map<CredentialKey, std::string> cache;
};

#endif // CREDENTIALS_H

// credentials.cpp
// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

#include "credentials.h"
#include <vector>
#include <cstring>
#include <openssl/evp.h>
#include <openssl/aes.h>

namespace {
    struct EncryptedData {
        std::vector<uint8_t> data;
        std::vector<uint8_t> nonce;
        std::vector<uint8_t> tag;
    };
    
    const std::unordered_map<CredentialKey, EncryptedData> encryptedData = {
        {CredentialKey::API_KEY, {
            /*data*/ {
                0x75, 0x9C, 0xA2, 0x01, 0xD8, 0x38, 0xC9, 0x08,
                0xED, 0xB5, 0x3C, 0x30, 0xE3, 0x12, 0x6A, 0xC5,
                0x2F, 0x8D, 0xE5, 0xA6, 0xEB, 0x2D, 0x16, 0x6D
            },
            /*nonce*/ {
                0xBA, 0x85, 0xA3, 0x6E, 0x09, 0x4D, 0x2F, 0x2B,
                0x5D, 0xC4, 0xBB, 0x86
            },
            /*tag*/ {
                0xF6, 0x87, 0xDA, 0xFF, 0x79, 0xDD, 0xAF, 0x2B,
                0x84, 0xB7, 0xA4, 0x3D, 0xD1, 0xA2, 0x75, 0x63
            }
        }},
        {CredentialKey::AWS_SECRET_KEY, {
            /*data*/ {
                0xD9, 0xAF, 0x0E, 0x89, 0x9C, 0xEC, 0xA1, 0x9A,
                0x02, 0x07, 0xCF, 0xC1, 0x13, 0x9D, 0xBB, 0xBF,
                0xC9, 0x61, 0xEE, 0x60, 0x4D, 0x53, 0x64, 0xE7,
                0x98, 0x4B, 0x7E, 0x38, 0x74, 0x12, 0x27, 0xC8
            },
            /*nonce*/ {
                0x09, 0x22, 0x2B, 0xDA, 0x95, 0x10, 0xE4, 0xFD,
                0x6D, 0xC7, 0x94, 0x5B
            },
            /*tag*/ {
                0x94, 0xC4, 0x7E, 0xCF, 0x68, 0xBB, 0x3F, 0xCE,
                0x6C, 0x2D, 0xE3, 0x8C, 0x86, 0x27, 0x2E, 0x65
            }
        }},
        {CredentialKey::DATABASE_URL, {
            /*data*/ {
                0x0C, 0xEE, 0xAA, 0x1A, 0x97, 0xB2, 0x58, 0x2E,
                0xFA, 0x3D, 0x02, 0x4A, 0x16, 0xDE, 0x23, 0xA5,
                0x91, 0x04, 0xE7, 0xD9, 0xD0, 0xD1, 0xB6, 0x30,
                0xDA, 0x79, 0x12, 0x47, 0xB0, 0x46, 0x20, 0x3A,
                0xB3, 0xAE, 0x56, 0xD5, 0x7C, 0x9D, 0xF4, 0x0E,
                0xE1, 0x7A, 0x73, 0xB3
            },
            /*nonce*/ {
                0x64, 0xC3, 0x9F, 0xE2, 0xCE, 0x0F, 0xA8, 0x31,
                0x5F, 0x9B, 0x59, 0x47
            },
            /*tag*/ {
                0x17, 0xA6, 0x18, 0x7D, 0x28, 0x98, 0x95, 0xEC,
                0xC7, 0x25, 0xB3, 0x3D, 0x4F, 0x28, 0x65, 0x97
            }
        }},
        {CredentialKey::JWT_SECRET, {
            /*data*/ {
                0x55, 0xB9, 0x8D, 0x48, 0xAB, 0x62, 0xB1, 0xCC,
                0x31, 0x39, 0x9E, 0xD3, 0x36, 0x7F, 0xFD, 0xA7,
                0x96, 0x3B, 0xF7, 0xA9, 0x23, 0xC7, 0xE7, 0x43,
                0x35, 0x97, 0xBB, 0xCA, 0xD0
            },
            /*nonce*/ {
                0x8E, 0x90, 0x8E, 0x71, 0xA4, 0xC4, 0x16, 0x28,
                0x69, 0x0F, 0xD3, 0xA1
            },
            /*tag*/ {
                0x3E, 0x30, 0xDB, 0x60, 0xB1, 0x27, 0xE5, 0x74,
                0xAA, 0xBD, 0x6A, 0xDC, 0x8D, 0xC6, 0x04, 0x28
            }
        }},
        {CredentialKey::STRIPE_KEY, {
            /*data*/ {
                0x0E, 0xF5, 0xE0, 0x7A, 0x06, 0xDC, 0x06, 0x5B,
                0xD4, 0xC6, 0x98, 0x3D, 0x11, 0xA4, 0x11, 0x07,
                0x3A, 0xB6, 0xA7, 0x25, 0x83, 0x64, 0x33, 0x5F,
                0x08, 0xA4, 0xDF
            },
            /*nonce*/ {
                0x90, 0x01, 0x0B, 0xF6, 0xE0, 0x51, 0x7D, 0x00,
                0x73, 0x81, 0xD6, 0x5E
            },
            /*tag*/ {
                0xF5, 0x0A, 0x0E, 0xD9, 0x12, 0x28, 0x09, 0x4E,
                0x1F, 0x10, 0xAC, 0x32, 0x61, 0x61, 0x52, 0x6D
            }
        }},
    };

    // Runtime decryption key (obfuscated)
    const std::vector<std::vector<uint8_t>> keyComponents = {
        {0x41, 0x4D, 0x04, 0x8A},
        {0x51, 0xE8, 0x79, 0x6E},
        {0xD6, 0x31, 0xE8, 0x8A},
        {0x3C, 0x1E, 0x77, 0xE8},
        {0x9F, 0x82, 0xC3, 0xA7},
        {0x6C, 0x0E, 0x26, 0xB4},
        {0x38, 0xBE, 0xCF, 0x51},
        {0xE9, 0x4B, 0xEF, 0xE2},
    };

    std::vector<uint8_t> reconstructKey() {
        std::vector<uint8_t> key;
        for (const auto& component : keyComponents) {
            key.insert(key.end(), component.begin(), component.end());
        }
        return key;
    }
}

std::unordered_map<CredentialKey, std::string> Credentials::cache;

std::optional<std::string> Credentials::decrypt(CredentialKey key) {
    auto it = encryptedData.find(key);
    if (it == encryptedData.end()) {
        return std::nullopt;
    }
    
    const auto& encrypted = it->second;
    auto keyData = reconstructKey();
    
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx) return std::nullopt;
    
    // Initialize AES-GCM decryption
    if (!EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), nullptr, keyData.data(), encrypted.nonce.data())) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Allocate output buffer
    std::vector<uint8_t> plaintext(encrypted.data.size());
    int len;
    
    // Decrypt
    if (!EVP_DecryptUpdate(ctx, plaintext.data(), &len, encrypted.data.data(), encrypted.data.size())) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Set tag
    if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, encrypted.tag.size(), 
                             const_cast<uint8_t*>(encrypted.tag.data()))) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Finalize
    int finalLen;
    if (!EVP_DecryptFinal_ex(ctx, plaintext.data() + len, &finalLen)) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    EVP_CIPHER_CTX_free(ctx);
    
    return std::string(plaintext.begin(), plaintext.begin() + len + finalLen);
}

std::optional<std::string> Credentials::decryptCached(CredentialKey key) {
    auto cached = cache.find(key);
    if (cached != cache.end()) {
        return cached->second;
    }
    
    auto decrypted = decrypt(key);
    if (decrypted) {
        cache[key] = *decrypted;
    }
    return decrypted;
}

void Credentials::clearCache() {
    cache.clear();
}