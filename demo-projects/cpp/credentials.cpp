// credentials.h
// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

#ifndef CREDENTIALS_H
#define CREDENTIALS_H

#include <string>
#include <optional>
#include <unordered_map>

enum class CredentialKey {
    API_KEY,
    AWS_SECRET_KEY,
    DATABASE_URL,
    JWT_SECRET,
    STRIPE_KEY
};

class Credentials {
public:
    static std::optional<std::string> decrypt(CredentialKey key);
    static std::optional<std::string> decryptCached(CredentialKey key);
    static void clearCache();
    
private:
    static std::unordered_map<CredentialKey, std::string> cache;
};

#endif // CREDENTIALS_H

// credentials.cpp
// Auto-generated by credential-code
// DO NOT EDIT - This file will be overwritten

#include "credentials.h"
#include <vector>
#include <cstring>
#include <openssl/evp.h>
#include <openssl/aes.h>

namespace {
    struct EncryptedData {
        std::vector<uint8_t> data;
        std::vector<uint8_t> nonce;
        std::vector<uint8_t> tag;
    };
    
    const std::unordered_map<CredentialKey, EncryptedData> encryptedData = {
        {CredentialKey::API_KEY, {
            /*data*/ {
                0x82, 0x5F, 0xD4, 0xFE, 0xBD, 0xC3, 0xE8, 0x55,
                0x33, 0x0D, 0xA5, 0x82, 0x7C, 0x14, 0x76, 0x11,
                0x02, 0x42, 0xAD, 0x04, 0xA4, 0x0D, 0x4B, 0xE5
            },
            /*nonce*/ {
                0x87, 0xE7, 0x02, 0x9D, 0x89, 0x82, 0x38, 0x19,
                0xE9, 0x34, 0x8E, 0x41
            },
            /*tag*/ {
                0x4D, 0xFB, 0x4D, 0xDA, 0xDC, 0x82, 0x8E, 0x87,
                0xA7, 0x64, 0x8B, 0x74, 0xDB, 0x9C, 0x7A, 0xF8
            }
        }},
        {CredentialKey::AWS_SECRET_KEY, {
            /*data*/ {
                0x2C, 0x58, 0x8C, 0xA9, 0x9C, 0x5A, 0x88, 0x9D,
                0xD3, 0x72, 0x96, 0x23, 0x94, 0xA5, 0xEE, 0x56,
                0xDE, 0x1C, 0xE0, 0xC7, 0xC5, 0x2D, 0x99, 0x60,
                0x63, 0x20, 0xC4, 0xD9, 0x80, 0xB2, 0x52, 0xD2
            },
            /*nonce*/ {
                0xBE, 0x10, 0x62, 0x9E, 0x98, 0x75, 0xB6, 0x4C,
                0x67, 0xEB, 0x88, 0xA6
            },
            /*tag*/ {
                0x5B, 0x2E, 0xC2, 0x1D, 0x27, 0x49, 0x51, 0xBD,
                0xE3, 0x8A, 0x93, 0x73, 0x66, 0x03, 0x6E, 0x8E
            }
        }},
        {CredentialKey::DATABASE_URL, {
            /*data*/ {
                0x4F, 0xBB, 0x61, 0x3B, 0x44, 0xB7, 0xD5, 0xCC,
                0x98, 0xB9, 0xD6, 0x38, 0x42, 0x87, 0x91, 0x68,
                0x01, 0x59, 0x77, 0x02, 0x13, 0xE8, 0x4C, 0xDB,
                0xF4, 0x9F, 0xF1, 0xB8, 0x6B, 0x3C, 0x73, 0x90,
                0x75, 0x43, 0xF3, 0xC1, 0x75, 0x7C, 0x8B, 0xB6,
                0xB8, 0xF9, 0x42, 0x2D
            },
            /*nonce*/ {
                0xF4, 0x3D, 0x37, 0xA0, 0x01, 0x6F, 0x0F, 0x82,
                0x82, 0x8E, 0x22, 0xAD
            },
            /*tag*/ {
                0x15, 0x7A, 0xB7, 0x1B, 0xFC, 0x2C, 0xC4, 0xB8,
                0x0B, 0xD7, 0x7D, 0x80, 0x89, 0xEE, 0x72, 0xDC
            }
        }},
        {CredentialKey::JWT_SECRET, {
            /*data*/ {
                0xDD, 0xF1, 0xB7, 0x1E, 0x81, 0x5E, 0x12, 0x7E,
                0xC7, 0xB0, 0xA2, 0xD9, 0x51, 0x47, 0x5B, 0x3F,
                0x32, 0xC8, 0x06, 0x24, 0x01, 0xD1, 0x77, 0xD3,
                0x05, 0x1C, 0x4A, 0xB1, 0x01
            },
            /*nonce*/ {
                0x46, 0xEA, 0x9E, 0xF5, 0xFB, 0x1E, 0xD1, 0x94,
                0x33, 0x74, 0xD3, 0x35
            },
            /*tag*/ {
                0xB1, 0x68, 0x14, 0xF3, 0xD4, 0xA0, 0x1C, 0xAF,
                0xFA, 0x02, 0x3A, 0x49, 0xC6, 0x8E, 0xB4, 0x42
            }
        }},
        {CredentialKey::STRIPE_KEY, {
            /*data*/ {
                0x35, 0xE9, 0xA4, 0x2E, 0x58, 0x70, 0xFB, 0x82,
                0x9D, 0x96, 0xD1, 0x13, 0xBC, 0x59, 0x93, 0xD3,
                0x6F, 0x05, 0xFA, 0xC9, 0x6B, 0x2F, 0x91, 0x1E,
                0x66, 0x2A, 0xF5
            },
            /*nonce*/ {
                0xE2, 0x70, 0x3B, 0xC7, 0xCE, 0x6E, 0xEF, 0x56,
                0x7C, 0x67, 0xD8, 0x1F
            },
            /*tag*/ {
                0x59, 0xE3, 0x1E, 0xB8, 0x40, 0x16, 0x0F, 0x3F,
                0x34, 0x05, 0x34, 0x24, 0xB7, 0xEC, 0x60, 0x18
            }
        }},
    };

    // Runtime decryption key (obfuscated)
    const std::vector<std::vector<uint8_t>> keyComponents = {
        {0xBA, 0xA3, 0xBA, 0x8A},
        {0xDB, 0xE2, 0x86, 0x67},
        {0xD0, 0x9E, 0x61, 0x76},
        {0x62, 0xD7, 0x26, 0xDC},
        {0xAE, 0x70, 0xAA, 0x90},
        {0x60, 0xA5, 0xD2, 0xD1},
        {0x72, 0x9C, 0x2D, 0xB8},
        {0x81, 0x2B, 0xF6, 0xF3},
    };

    std::vector<uint8_t> reconstructKey() {
        std::vector<uint8_t> key;
        for (const auto& component : keyComponents) {
            key.insert(key.end(), component.begin(), component.end());
        }
        return key;
    }
}

std::unordered_map<CredentialKey, std::string> Credentials::cache;

std::optional<std::string> Credentials::decrypt(CredentialKey key) {
    auto it = encryptedData.find(key);
    if (it == encryptedData.end()) {
        return std::nullopt;
    }
    
    const auto& encrypted = it->second;
    auto keyData = reconstructKey();
    
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx) return std::nullopt;
    
    // Initialize AES-GCM decryption
    if (!EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), nullptr, keyData.data(), encrypted.nonce.data())) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Allocate output buffer
    std::vector<uint8_t> plaintext(encrypted.data.size());
    int len;
    
    // Decrypt
    if (!EVP_DecryptUpdate(ctx, plaintext.data(), &len, encrypted.data.data(), encrypted.data.size())) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Set tag
    if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, encrypted.tag.size(), 
                             const_cast<uint8_t*>(encrypted.tag.data()))) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    // Finalize
    int finalLen;
    if (!EVP_DecryptFinal_ex(ctx, plaintext.data() + len, &finalLen)) {
        EVP_CIPHER_CTX_free(ctx);
        return std::nullopt;
    }
    
    EVP_CIPHER_CTX_free(ctx);
    
    return std::string(plaintext.begin(), plaintext.begin() + len + finalLen);
}

std::optional<std::string> Credentials::decryptCached(CredentialKey key) {
    auto cached = cache.find(key);
    if (cached != cache.end()) {
        return cached->second;
    }
    
    auto decrypted = decrypt(key);
    if (decrypted) {
        cache[key] = *decrypted;
    }
    return decrypted;
}

void Credentials::clearCache() {
    cache.clear();
}