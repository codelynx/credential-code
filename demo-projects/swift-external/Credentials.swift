// Auto-generated by credential-code (External Key Mode)
// DO NOT EDIT - This file will be overwritten

import Foundation
import CryptoKit

public enum CredentialKey: String, CaseIterable {
    case API_KEY = "API_KEY"
    case AWS_SECRET_KEY = "AWS_SECRET_KEY"
    case DATABASE_URL = "DATABASE_URL"
    case JWT_SECRET = "JWT_SECRET"
    case STRIPE_KEY = "STRIPE_KEY"
}

public struct Credentials {
    // Encrypted credential data as byte arrays
    private static let encryptedData: [CredentialKey: (data: [UInt8], nonce: [UInt8], tag: [UInt8])] = [
        .API_KEY: (
            data: [
                0xEB, 0x4D, 0xA1, 0xF5, 0x35, 0x8C, 0x58, 0x63,
                0x50, 0x45, 0xC9, 0x23, 0xFC, 0x2A, 0x9E, 0xD0,
                0x9A, 0x81, 0xBA, 0x3D, 0x69, 0xD8, 0x99, 0x22
            ],
            nonce: [
                0xC4, 0xB4, 0x1F, 0xE8, 0xC8, 0x39, 0x51, 0xFE,
                0x30, 0x15, 0x29, 0xF2
            ],
            tag: [
                0x9C, 0x92, 0x2E, 0x52, 0x43, 0x9C, 0xD9, 0x6A,
                0x89, 0x86, 0xB1, 0x1A, 0x55, 0x03, 0x91, 0x20
            ]
        ),
        .AWS_SECRET_KEY: (
            data: [
                0x67, 0x79, 0x40, 0x9B, 0xFB, 0xCC, 0xF3, 0x16,
                0x23, 0x80, 0x1C, 0x8A, 0x44, 0x6E, 0x53, 0x7B,
                0xAC, 0x9B, 0xAC, 0x86, 0x65, 0x20, 0x46, 0x04,
                0x94, 0x97, 0xE2, 0x97, 0x4A, 0x29, 0xB9, 0x41
            ],
            nonce: [
                0x41, 0x72, 0xF1, 0xDE, 0xB8, 0x4A, 0xDC, 0x58,
                0x78, 0xFF, 0x47, 0x86
            ],
            tag: [
                0xCF, 0x9C, 0xD9, 0x40, 0xC3, 0x81, 0xC6, 0xE0,
                0x84, 0xEB, 0x4B, 0x0F, 0x51, 0x4A, 0x4C, 0x46
            ]
        ),
        .DATABASE_URL: (
            data: [
                0x2E, 0x49, 0x26, 0x0E, 0x47, 0xA5, 0x86, 0x0F,
                0x4E, 0x33, 0xB6, 0x8D, 0xB9, 0x11, 0xEB, 0x6E,
                0x1D, 0x45, 0xBC, 0xEF, 0xC5, 0xEA, 0x2F, 0xCF,
                0x05, 0x55, 0x07, 0x61, 0x46, 0x7A, 0x4A, 0x05,
                0xDE, 0xB8, 0xD8, 0x35, 0x92, 0xE3, 0xDA, 0xBB,
                0xBF, 0x72, 0xBD, 0x30
            ],
            nonce: [
                0x5F, 0xFA, 0x07, 0x9C, 0xB1, 0xDC, 0xD6, 0x3F,
                0xFC, 0x20, 0x9F, 0xDF
            ],
            tag: [
                0x54, 0xDC, 0x52, 0x97, 0x62, 0xB9, 0xD0, 0x92,
                0x8E, 0xFB, 0xF3, 0x11, 0xD6, 0x56, 0xA7, 0xB4
            ]
        ),
        .JWT_SECRET: (
            data: [
                0x11, 0xCB, 0x42, 0xB6, 0x3C, 0xF1, 0x3A, 0x43,
                0x71, 0x69, 0x4B, 0xE2, 0xDE, 0xED, 0xF4, 0xA3,
                0x06, 0x7C, 0xED, 0x89, 0x81, 0xFB, 0x74, 0xB4,
                0x8E, 0x5D, 0x00, 0x57, 0x99
            ],
            nonce: [
                0x57, 0xDE, 0xD5, 0xC3, 0xA3, 0x39, 0xB4, 0xAB,
                0x9F, 0x6C, 0x7B, 0x29
            ],
            tag: [
                0x38, 0x6A, 0xAE, 0xEF, 0xDF, 0xDB, 0x3B, 0x7F,
                0x10, 0x2B, 0x1D, 0x02, 0xB0, 0xB7, 0xE9, 0x8E
            ]
        ),
        .STRIPE_KEY: (
            data: [
                0xEC, 0x83, 0x44, 0x27, 0x96, 0x83, 0xAA, 0xA0,
                0x00, 0xD2, 0x7B, 0xEE, 0x60, 0x39, 0x55, 0xE9,
                0xED, 0x8C, 0xCA, 0xC8, 0x4A, 0xA6, 0xB3, 0x2B,
                0x28, 0xDF, 0xC2
            ],
            nonce: [
                0x1D, 0xFC, 0x1D, 0xF4, 0xA0, 0xD5, 0x0D, 0xFF,
                0xCF, 0x02, 0xAA, 0xF3
            ],
            tag: [
                0x93, 0x19, 0x84, 0xEC, 0x36, 0xB4, 0x02, 0xC4,
                0x7B, 0x17, 0xF4, 0xBD, 0xC7, 0x36, 0x54, 0x49
            ]
        ),
    ]

    // External key support - can be from source file or runtime initialization
    private static var externalKey: SymmetricKey?
    
    // Try to get key from CredentialKeyProvider if available, otherwise use initialized key
    private static func getEncryptionKey() throws -> SymmetricKey {
        // First check if key was initialized at runtime
        if let key = externalKey {
            return key
        }
        
        // When using external key source, CredentialKeyProvider should be included in compilation
        // This will cause a compile error if CredentialKeyProvider is not available,
        // which is the intended behavior when using external key source
        return SymmetricKey(data: CredentialKeyProvider.key)
    }
    
    // Initialize with external key (for runtime initialization)
    public static func initialize(with keyData: Data) {
        externalKey = SymmetricKey(data: keyData)
    }
    
    // Initialize with base64 encoded key
    public static func initialize(with base64Key: String) throws {
        guard let keyData = Data(base64Encoded: base64Key) else {
            throw CredentialError.invalidKey
        }
        initialize(with: keyData)
    }
    
    // Load key from file
    public static func loadKey(from filePath: String) throws {
        let url = URL(fileURLWithPath: filePath)
        let data = try Data(contentsOf: url)
        
        // Try to parse as JSON
        if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
           let keyString = json["key"] as? String,
           let keyData = Data(base64Encoded: keyString) {
            initialize(with: keyData)
        } else {
            // Assume raw key data
            initialize(with: data)
        }
    }
    
    // Decrypt a credential at runtime
    public static func get(_ key: CredentialKey) throws -> String {
        let encryptionKey = try getEncryptionKey()
        
        guard let encrypted = encryptedData[key] else {
            throw CredentialError.credentialNotFound
        }
        
        // Reconstruct the sealed box
        let nonce = try AES.GCM.Nonce(data: Data(encrypted.nonce))
        let sealedBox = try AES.GCM.SealedBox(
            nonce: nonce,
            ciphertext: Data(encrypted.data),
            tag: Data(encrypted.tag)
        )
        
        // Decrypt
        let decryptedData = try AES.GCM.open(sealedBox, using: encryptionKey)
        
        guard let value = String(data: decryptedData, encoding: .utf8) else {
            throw CredentialError.decryptionFailed
        }
        
        return value
    }
    
    // Get with operator
    public static subscript(key: CredentialKey) -> String? {
        try? get(key)
    }
    
    // Check if key is initialized
    public static var isInitialized: Bool {
        do {
            _ = try getEncryptionKey()
            return true
        } catch {
            return false
        }
    }
}

// Extended error cases
enum CredentialError: Error {
    case invalidKey
    case keyNotInitialized
    case credentialNotFound
    case invalidEncryptedData
    case decryptionFailed
}