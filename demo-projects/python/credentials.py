# Auto-generated by credential-code
# DO NOT EDIT - This file will be overwritten

from enum import Enum
from typing import Optional, Dict
from cryptography.hazmat.primitives.ciphers.aead import AESGCM


class CredentialKey(Enum):
    API_KEY = "API_KEY"
    AWS_SECRET_KEY = "AWS_SECRET_KEY"
    DATABASE_URL = "DATABASE_URL"
    JWT_SECRET = "JWT_SECRET"
    STRIPE_KEY = "STRIPE_KEY"


class Credentials:
    # Encrypted credential data as byte arrays
    _encrypted_data = {
        CredentialKey.API_KEY: {
            'data': (
                b'\x17\xb1\xcb\x3a\x45\xc7\x10\x6c\x19\xc4\x3e\x8a\xf1\x70\xf6\x2e'
                b'\x97\xc1\xc3\x66\x13\x46\x82\x18'
            ),
            'nonce': b'\xd7\x29\x13\x86\x88\xaf\xdf\xe1\xf4\xf6\x86\xfc',
            'tag': b'\x6c\xe7\x0e\xc7\xab\xab\x3a\xca\xa7\x2e\xed\xd5\x31\xec\x0a\x31'
        },
        CredentialKey.AWS_SECRET_KEY: {
            'data': (
                b'\x32\x64\xbd\xf9\xd9\x98\x95\x51\x23\xa8\x0e\x1d\x12\x8c\x51\x6e'
                b'\x1f\x24\x33\x78\xe5\x56\xff\xe3\x3f\x70\x4e\xa9\x5d\x0b\xd7\x43'
            ),
            'nonce': b'\x32\xc1\x67\xcd\x96\x54\xe8\x59\x7b\xd7\xf0\x6f',
            'tag': b'\x74\xb3\x16\xaf\x59\x61\x5f\x6e\xd7\xa0\x15\xe7\x98\x52\x25\xed'
        },
        CredentialKey.DATABASE_URL: {
            'data': (
                b'\x8e\x6d\xfa\x3b\xff\xed\xfb\xbe\x12\xff\xf1\x1f\xfc\xcb\xde\x6b'
                b'\xe2\x1e\x24\x4d\x48\xec\x48\x20\x4d\x0c\xaa\x2c\x07\xf3\x64\xe2'
                b'\xb1\x83\x60\xab\x95\x8a\x36\x2e\xbf\xa8\x3b\xda'
            ),
            'nonce': b'\xe6\x49\x26\xa1\xa9\xe8\x9b\x8f\x19\x67\xa0\x00',
            'tag': b'\xf3\x1f\x7c\x15\x3d\x97\x7b\x62\x72\xc6\x25\xb3\x1a\xb3\x88\x70'
        },
        CredentialKey.JWT_SECRET: {
            'data': (
                b'\xe9\x24\xb2\x0e\x01\xad\x5d\x84\x59\x0b\xca\x94\x6e\x0a\x05\xf2'
                b'\xab\xc6\x0a\xe6\xa1\x0c\xb9\x63\xa4\x10\xed\x0a\xa5'
            ),
            'nonce': b'\x01\x7c\x85\xa2\x29\xd8\xc1\x39\x26\x3c\xa8\xcf',
            'tag': b'\xa1\xa7\x74\xa2\xd4\xe9\x3f\x33\x73\x2f\x8a\xcc\xfd\x68\x5f\xd5'
        },
        CredentialKey.STRIPE_KEY: {
            'data': (
                b'\x8b\x04\xa5\x95\x4f\x8c\xa6\x9f\x06\xc6\x9a\xf9\x74\xa1\x2c\x47'
                b'\x3b\x98\xf2\x36\x56\x75\xd8\x60\x8d\xf3\xb1'
            ),
            'nonce': b'\x56\x7d\xfe\x36\x85\x17\xb0\xde\xf3\xcb\x86\x49',
            'tag': b'\x97\xe8\x6e\x36\x81\x93\x64\x86\x78\xc4\x19\x57\xb0\xca\xed\x67'
        },
    }

    # Runtime decryption key (obfuscated)
    _key_components = [
        b'\x8a\x19\x23\x9a',
        b'\xfc\xa7\xc3\xa3',
        b'\x84\xf6\xef\x9f',
        b'\x67\x7f\xed\x4e',
        b'\x9e\xf2\xe4\x57',
        b'\x4f\x91\x54\x39',
        b'\xba\x63\xf7\xda',
        b'\xf0\xc4\xd0\x89',
    ]

    # Cache for decrypted values
    _cache: Dict[CredentialKey, str] = {}
    
    @staticmethod
    def decrypt(key: CredentialKey) -> Optional[str]:
        """Decrypt a credential by key."""
        encrypted = Credentials._encrypted_data.get(key)
        if not encrypted:
            return None
        
        try:
            # Reconstruct the decryption key
            key_data = b''.join(Credentials._key_components)
            
            # Decrypt using AES-GCM
            aesgcm = AESGCM(key_data)
            decrypted = aesgcm.decrypt(
                encrypted['nonce'],
                encrypted['data'] + encrypted['tag'],
                None
            )
            
            return decrypted.decode('utf-8')
        except Exception:
            return None
    
    @staticmethod
    def decrypt_cached(key: CredentialKey) -> Optional[str]:
        """Decrypt a credential with caching."""
        if key in Credentials._cache:
            return Credentials._cache[key]
        
        decrypted = Credentials.decrypt(key)
        if decrypted:
            Credentials._cache[key] = decrypted
        return decrypted
    
    @staticmethod
    def clear_cache() -> None:
        """Clear the credential cache."""
        Credentials._cache.clear()


# Convenience function
def get_credential(key: CredentialKey) -> Optional[str]:
    """Get a credential value by key."""
    return Credentials.decrypt(key)