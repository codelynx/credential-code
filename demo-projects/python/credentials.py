# Auto-generated by credential-code
# DO NOT EDIT - This file will be overwritten

from enum import Enum
from typing import Optional, Dict
from cryptography.hazmat.primitives.ciphers.aead import AESGCM


class CredentialKey(Enum):
    API_KEY = "API_KEY"
    AWS_SECRET_KEY = "AWS_SECRET_KEY"
    DATABASE_URL = "DATABASE_URL"
    JWT_SECRET = "JWT_SECRET"
    STRIPE_KEY = "STRIPE_KEY"


class Credentials:
    # Encrypted credential data as byte arrays
    _encrypted_data = {
        CredentialKey.API_KEY: {
            'data': (
                b'\x75\x20\x81\x86\xad\xf3\xaf\x18\xbf\xe8\xbb\x8e\xd1\x62\xb5\x50'
                b'\xeb\x66\x27\x8f\xd0\x34\x2c\x7b'
            ),
            'nonce': b'\x7c\x4d\x87\x2c\x2d\xae\x2e\xdb\x74\xfa\xb3\x0d',
            'tag': b'\xaa\x5e\x2b\xa6\x44\xdc\xa1\x43\x79\x4a\x03\x7c\xcc\xa4\x70\xd5'
        },
        CredentialKey.AWS_SECRET_KEY: {
            'data': (
                b'\xf7\x14\x60\xdd\x3d\x1a\xba\x2d\x6d\xb9\xc1\xbc\x08\x33\x2c\x38'
                b'\xd0\xff\xfa\x3c\x3b\x1d\x42\x3e\x78\xe0\xbd\x18\x88\x35\x22\xe7'
            ),
            'nonce': b'\x06\xb4\xe4\x18\x3b\xac\xa5\x35\x35\xcf\x38\x04',
            'tag': b'\x32\x52\x4b\x78\xb8\xab\x30\xfb\x5d\xc5\x48\x1a\x23\x50\x27\x1e'
        },
        CredentialKey.DATABASE_URL: {
            'data': (
                b'\x12\x75\x5e\xdd\xb1\x0e\x75\x3a\x61\xa5\xd5\x4a\xb2\xa5\x09\x39'
                b'\xac\x4a\x46\x2b\x8c\x60\x6c\x60\x5c\xb5\x9d\x04\xdc\x0d\xb1\x34'
                b'\x7f\x3e\x1a\xe6\xbd\xfc\x16\x7c\xef\x0b\x84\xf0'
            ),
            'nonce': b'\x40\xfc\x83\x73\xe4\x66\x04\x10\xa2\xf5\x02\xd0',
            'tag': b'\x07\x63\x67\xc0\x51\xdf\x9b\xd3\x57\x8d\x98\xcf\x70\x42\x24\xa9'
        },
        CredentialKey.JWT_SECRET: {
            'data': (
                b'\xc0\x6e\x2a\xf0\xd5\x76\x8d\x46\x82\xe9\x4d\xc3\x56\x8a\xa6\x21'
                b'\x16\x3c\x34\x3f\x01\xd7\xf0\xb0\xf8\x7e\xa8\x0e\x17'
            ),
            'nonce': b'\xff\x54\xe9\x08\x2f\x6a\x25\x81\x60\xb9\xfa\xd4',
            'tag': b'\xf4\x73\x9c\xb0\x82\xc5\x7e\x59\xf4\xcb\x9f\x19\x83\xaf\xb5\xc8'
        },
        CredentialKey.STRIPE_KEY: {
            'data': (
                b'\xfa\xe1\xca\xd1\x22\x6c\x9a\xb5\x3e\xd8\x86\x38\x86\xee\x32\x4a'
                b'\xce\xb3\x09\x70\x7d\xde\xdc\xeb\x48\x92\xe0'
            ),
            'nonce': b'\x5c\x59\xaf\x62\xd9\xc9\xf0\xdd\xe9\xb1\xa6\x13',
            'tag': b'\x01\xd8\x5a\x8f\xf7\x4a\x7d\x87\xd5\x4b\x29\x95\x91\x94\x6e\x59'
        },
    }

    # Runtime decryption key (obfuscated)
    _key_components = [
        b'\xda\xab\x0c\x3d',
        b'\x97\x8b\xee\x82',
        b'\x96\x02\x14\xbe',
        b'\x9a\x01\xd6\x0d',
        b'\x86\xe2\x74\x74',
        b'\x1e\xc5\xe7\x92',
        b'\x78\xea\x09\x84',
        b'\xac\xcd\x3d\x8a',
    ]

    # Cache for decrypted values
    _cache: Dict[CredentialKey, str] = {}
    
    @staticmethod
    def decrypt(key: CredentialKey) -> Optional[str]:
        """Decrypt a credential by key."""
        encrypted = Credentials._encrypted_data.get(key)
        if not encrypted:
            return None
        
        try:
            # Reconstruct the decryption key
            key_data = b''.join(Credentials._key_components)
            
            # Decrypt using AES-GCM
            aesgcm = AESGCM(key_data)
            decrypted = aesgcm.decrypt(
                encrypted['nonce'],
                encrypted['data'] + encrypted['tag'],
                None
            )
            
            return decrypted.decode('utf-8')
        except Exception:
            return None
    
    @staticmethod
    def decrypt_cached(key: CredentialKey) -> Optional[str]:
        """Decrypt a credential with caching."""
        if key in Credentials._cache:
            return Credentials._cache[key]
        
        decrypted = Credentials.decrypt(key)
        if decrypted:
            Credentials._cache[key] = decrypted
        return decrypted
    
    @staticmethod
    def clear_cache() -> None:
        """Clear the credential cache."""
        Credentials._cache.clear()


# Convenience function
def get_credential(key: CredentialKey) -> Optional[str]:
    """Get a credential value by key."""
    return Credentials.decrypt(key)