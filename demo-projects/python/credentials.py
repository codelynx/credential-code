# Auto-generated by credential-code
# DO NOT EDIT - This file will be overwritten

from enum import Enum
from typing import Optional, Dict
from cryptography.hazmat.primitives.ciphers.aead import AESGCM


class CredentialKey(Enum):
    API_KEY = "API_KEY"
    AWS_SECRET_KEY = "AWS_SECRET_KEY"
    DATABASE_URL = "DATABASE_URL"
    JWT_SECRET = "JWT_SECRET"
    STRIPE_KEY = "STRIPE_KEY"


class Credentials:
    # Encrypted credential data as byte arrays
    _encrypted_data = {
        CredentialKey.API_KEY: {
            'data': (
                b'\x6c\x5d\x8a\x14\x52\x68\x4e\xfa\xd0\xc4\x27\xcd\xd4\x3d\xc1\x1d'
                b'\x21\x6a\xdc\x13\x87\x53\x5c\x00'
            ),
            'nonce': b'\x48\xa8\x28\x96\x0a\x8c\xa7\xf2\x6e\x52\xdc\x85',
            'tag': b'\xd1\x06\x73\x7f\xea\xa8\x43\x47\x39\xb2\x9f\xed\xfb\x08\x7c\xf1'
        },
        CredentialKey.AWS_SECRET_KEY: {
            'data': (
                b'\xcc\xf3\x18\x5b\x6f\x2d\xce\xdf\xc7\x0e\x2a\x70\x23\x58\xd0\x60'
                b'\xc7\x4e\x6f\x0b\xf9\x38\x39\xed\xe0\x5c\x2a\xb5\x22\x14\x34\x38'
            ),
            'nonce': b'\x15\x33\x0d\xda\xaf\xb5\x96\x28\xa7\x52\xd5\x0d',
            'tag': b'\xc1\xf0\xa8\x24\xd9\x0f\x27\x0b\x30\xb7\x53\xa7\x1f\x72\xa6\xe9'
        },
        CredentialKey.DATABASE_URL: {
            'data': (
                b'\xa5\xdb\x50\x33\xc2\x7a\xae\xd3\x4a\x8c\x49\x2b\x6f\x4d\xa3\x2e'
                b'\x81\x9d\xe0\x60\xed\xbb\x86\x32\x90\x24\xe4\xbf\xd4\x07\x9b\x9f'
                b'\x06\x2e\x22\xe0\xe6\xf4\x12\x4d\x7e\xc7\x2b\x86'
            ),
            'nonce': b'\x08\xaa\xc9\x44\xc6\x3d\xa4\x15\xa2\x7a\xc0\xf0',
            'tag': b'\xf0\x38\xb4\x10\xd2\x06\x8a\x71\xff\x04\x25\x69\x13\xab\xc2\x7e'
        },
        CredentialKey.JWT_SECRET: {
            'data': (
                b'\x2d\x45\xbb\x72\xab\x2c\x72\xea\x5f\x3c\x13\x7f\xe4\x36\x0d\xd5'
                b'\xcf\x54\x03\x9c\xef\x13\xbb\xad\xa7\x21\x45\x13\x7a'
            ),
            'nonce': b'\x7f\xf8\x60\x4d\xaf\xb9\x71\xc6\x9e\x03\x18\xaf',
            'tag': b'\x60\xd0\xb5\x06\x28\xd8\x75\xfe\x0f\x97\xf6\xc4\x17\x49\xa7\x61'
        },
        CredentialKey.STRIPE_KEY: {
            'data': (
                b'\x35\xfb\xc8\x49\xd0\x79\x4c\xca\x3f\x9c\x66\xe4\x77\x25\xad\x7c'
                b'\xd9\x7e\xe2\x36\x88\x7a\x55\x01\x49\x0d\xb8'
            ),
            'nonce': b'\xc3\xe7\x39\x20\x5c\xb0\x8d\xd0\x52\x38\x88\xbe',
            'tag': b'\x63\x39\x79\x14\x56\x56\xde\x71\x92\xd4\x1f\x67\x74\x86\x35\x6d'
        },
    }

    # Runtime decryption key (obfuscated)
    _key_components = [
        b'\x9e\x3b\xed\xd5',
        b'\xf0\x9a\x95\xaf',
        b'\x03\xd8\x2b\xcf',
        b'\x39\x48\xc4\xef',
        b'\xea\xf7\xf9\x2b',
        b'\xc1\xbe\xf8\xc0',
        b'\x03\xa1\x1b\xbd',
        b'\xcb\x77\x0a\x2b',
    ]

    # Cache for decrypted values
    _cache: Dict[CredentialKey, str] = {}
    
    @staticmethod
    def decrypt(key: CredentialKey) -> Optional[str]:
        """Decrypt a credential by key."""
        encrypted = Credentials._encrypted_data.get(key)
        if not encrypted:
            return None
        
        try:
            # Reconstruct the decryption key
            key_data = b''.join(Credentials._key_components)
            
            # Decrypt using AES-GCM
            aesgcm = AESGCM(key_data)
            decrypted = aesgcm.decrypt(
                encrypted['nonce'],
                encrypted['data'] + encrypted['tag'],
                None
            )
            
            return decrypted.decode('utf-8')
        except Exception:
            return None
    
    @staticmethod
    def decrypt_cached(key: CredentialKey) -> Optional[str]:
        """Decrypt a credential with caching."""
        if key in Credentials._cache:
            return Credentials._cache[key]
        
        decrypted = Credentials.decrypt(key)
        if decrypted:
            Credentials._cache[key] = decrypted
        return decrypted
    
    @staticmethod
    def clear_cache() -> None:
        \"\"\"Clear the credential cache.\"\"\"
        Credentials._cache.clear()


# Convenience function
def get_credential(key: CredentialKey) -> Optional[str]:
    """Get a credential value by key."""
    return Credentials.decrypt(key)